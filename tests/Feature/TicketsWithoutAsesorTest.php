<?php

namespace Tests\Feature;

use App\Models\Tickets;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Http;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class TicketsWithoutAsesorTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    public $data = [];
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setInitDataUserSanctum();

        $this->data = [
            'datosSugarCRM' => [
                'numero_identificacion' => $this->faker->numerify('##########'),
                'tipo_identificacion' => 'C',
                'email' => 'frvr@gmail.com',
                'nombres' => 'FREDDY ROBERTO',
                'apellidos' => 'VARGAS RODRIGUEZ',
                'celular' => '0987519726',
                'telefono' => '022072826',
                'estado' => '1',
                'motivo_cierre' => 'no_contesta',
                'linea_negocio' => '2',
                'tipo_transaccion' => '1',
                'marca' => '1',
                'modelo' => '1',
                'anio' => '2020',
                'placa' => 'PCY7047',
                'kilometraje' => '190000',
                'color' => 'GRIS',
                'asunto' => 'molestias',
                'id_interaccion_inconcert' => 'id_interaccion_inconcert',
                'comentario_cliente' => 'comentario_cliente',
                'description' => 'description',
                'porcentaje_discapacidad' => '30_49',
                'medio' => 5,
                'campania' => '5e686580-ee19-11ea-97ea-000c297d72b1'
            ]
        ];
    }

    /** @test */
    public function create_ticket_succesfull()
    {
        $response = $this->json('POST', $this->baseUrl . 'tickets', $this->data);
        $content = json_decode($response->content());
        $response->assertStatus(200);
        $this->assertNotNull($content->data->ticket_id);
        $this->assertNotNull($content->data->ticket_name);
        $this->assertNotNull($content->data->interaction_id);

        $ticket = Tickets::find($content->data->ticket_id);
        $this->assertEquals($ticket->numero_identificacion, $this->data['datosSugarCRM']['numero_identificacion']);
        $this->assertEquals($ticket->fuente, '2');
        $this->assertEquals($ticket->tipo_identificacion, $this->data['datosSugarCRM']['tipo_identificacion']);
        $this->assertEquals($ticket->email, $this->data['datosSugarCRM']['email']);
        $this->assertEquals($ticket->nombres, $this->data['datosSugarCRM']['nombres']);
        $this->assertEquals($ticket->estado, $this->data['datosSugarCRM']['estado']);
        $this->assertEquals($ticket->linea_negocio, $this->data['datosSugarCRM']['linea_negocio']);
        $this->assertEquals($ticket->id, $ticket->ticketsCstm->id_c);
        $this->assertEquals($ticket->estado, $ticket->ticketsCstm->flag_estados_c);
        $this->assertNotEmpty($ticket->assigned_user_id);
        $this->assertEquals($ticket->ticketsCstm->porcentaje_discapacidad_c, $this->data['datosSugarCRM']['porcentaje_discapacidad']);
        $this->assertEquals($ticket->ticketsCstm->medio_c, $this->data['datosSugarCRM']['medio']);
        $this->assertEquals($ticket->ticketsCstm->campaign_id_c, $this->data['datosSugarCRM']['campania']);

        $interaction = $ticket->interacciones[0];
        $this->assertEquals($interaction->numero_identificacion, $this->data['datosSugarCRM']['numero_identificacion']);
        $this->assertEquals($interaction->fuente, '2');
        $this->assertEquals($interaction->tipo_identificacion, $this->data['datosSugarCRM']['tipo_identificacion']);
        $this->assertEquals($interaction->email, $this->data['datosSugarCRM']['email']);
        $this->assertEquals($interaction->nombre, $this->data['datosSugarCRM']['nombres']);

        $interactionCstm = $interaction->interaccionesCstm()->first();
        $this->assertEquals($interactionCstm->medio_c, $this->data['datosSugarCRM']['medio']);
        $this->assertEquals($interactionCstm->campaign_id_c, $this->data['datosSugarCRM']['campania']);
    }

    /** @test */
    public function create_ticket_with_data_invalid()
    {
        $data = [
            'datosSugarCRM' => [
                'tipo_identificacion'=>'001',
                'email'=>'roberto@gmailcom',
                'nombres'=>'Prueba',
                'estado'=> 100,
                'linea_negocio'=>  1000
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'tickets', $data);
        $content = json_decode($response->content());

        $response->assertStatus(422);
        $err_no_identificacion = 'datosSugarCRM.numero_identificacion';
        $err_tipo_identificacion = 'datosSugarCRM.tipo_identificacion';
        $err_linea_negocio = 'datosSugarCRM.linea_negocio';
        $err_email = 'datosSugarCRM.email';

        $this->assertEquals($content->errors->$err_no_identificacion[0], 'Identificación es requerida');
        $this->assertEquals($content->errors->$err_tipo_identificacion[0], 'Tipo de identificación no contiene un valor válido, valores válidos: C(Cedula),P(Pasaporte), R(RUC)');
        $this->assertEquals($content->errors->$err_linea_negocio[0], 'Linea no contiene un valor válido, valores válidos: 1(Postventa),2(Nuevos), 3(Seminuevos), 4(Exonerados)');
        $this->assertEquals($content->errors->$err_email[0], 'Email debe ser un email válido');
    }

    /** @test */
    public function create_ticket_with_data_incomplete()
    {
        $data = [
            'datosSugarCRM' => [
                'numero_identificacion'=>'1234567890',
                'email'=>'roberto@gmail.com',
                'nombres'=>'Prueba',
                'linea_negocio'=>  1000
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'tickets', $data);
        $content = json_decode($response->content());
        $response->assertStatus(422);
        $err_tipo_identificacion = 'datosSugarCRM.tipo_identificacion';

        $this->assertEquals($content->errors->$err_tipo_identificacion[0], 'Tipo de identificación es requerida para el número de identificación');
    }

    /** @test */
    public function create_ticket_with_invalid_username()
    {
        $data = [
            'datosSugarCRM' => [
                'numero_identificacion'=>'1234567891002',
                'tipo_identificacion'=>'C',
                'email'=>'roberto@gmail.com',
                'celular'=>'0987517283',
                'nombres'=>'Prueba',
                'apellidos'=>'Apellidos',
                'estado'=> 4,
                'linea_negocio'=>  4,
                'user_name'=> 'not_exists',
                'id_interaccion_inconcert' => 'id_interaccion_inconcert',
                'tipo_transaccion' => '1'
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'tickets', $data);
        $content = json_decode($response->content());
        $response->assertStatus(422);
        $err_user_name = 'datosSugarCRM.user_name';

        $this->assertEquals($content->errors->$err_user_name[0], 'User-name inválido, asesor  no se encuentra registrado');
    }

    /** @test */
    public function update_ticket_success()
    {
        $this->data['datosSugarCRM']['numero_identificacion'] = $this->faker->numerify('##########');
        $response = $this->json('POST', $this->baseUrl . 'tickets', $this->data);
        $content_created = json_decode($response->content());
        $response->assertStatus(200);

        $data = [
            'datosSugarCRM' => [
                'motivo_cierre' => 'abandono_chat'
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'close_ticket/'. $content_created->data->ticket_id, $data);

        $content_update = json_decode($response->content());
        $response->assertStatus(200);
        $this->assertEquals($content_update->data->ticket_id, $content_created->data->ticket_id);
    }

    /** @test */
    public function update_ticket_no_exists()
    {
        $data = [
            'datosSugarCRM' => [
                'motivo_cierre' => 'solo_informacion'
            ]
        ];
        $response = $this->json('POST', $this->baseUrl . 'close_ticket/id_not_exists', $data);

        $content_update = json_decode($response->content());

        $response->assertStatus(404);
        $this->assertEquals($content_update->error, 'Ticket no existe, id inválido');
    }

    /** @test */
    public function update_ticket_error_status()
    {
        $this->data['datosSugarCRM']['numero_identificacion'] = $this->faker->numerify('##########');
        $response = $this->json('POST', $this->baseUrl . 'tickets', $this->data);
        $content_created = json_decode($response->content());
        $response->assertStatus(200);
        $data = [
            'datosSugarCRM' => [
                'motivo_cierre' => 'other_rason'
            ]
        ];
        $response = $this->json('POST', $this->baseUrl . 'close_ticket/'. $content_created->data->ticket_id, $data);

        $content_update = json_decode($response->content());

        $response->assertStatus(422);
        $err_motivo_cierre = 'datosSugarCRM.motivo_cierre';

        $this->assertEquals($content_update->errors->$err_motivo_cierre[0], 'Motivo de cierre no contiene un valor válido, valores válidos: abandono_chat,solo_informacion,desiste,no_contesta,compra_futura');

    }
}
