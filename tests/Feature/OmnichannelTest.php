<?php

namespace Tests\Feature;

use App\Models\Companies;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Client\Request;
use Illuminate\Support\Facades\Http;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class OmnichannelTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    public $dataOmnichannel = [];
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Companies::factory()->create();
        Sanctum::actingAs(
            User::factory()->create(),
            ['environment:dev']
        );

        $this->dataOmnichannel = [
          "numero_identificacion" => "171542654",
          "email" => "test@gmail.com",
          "nombres" => "María",
          "apellidos" => "Rodríguez",
          "celular" => "0987510142",
          "tokenC2C" => "12345647897987987",
          "datos_adicionales" => [
              "pageUrl" => "www.landing.com",
              'fields' => [
                  ['key' => 'Modelo','nombre' => 'Yaris Sedan TM'],
                  ['key' => 'vehiculo_version','nombre' => 'XLE'],
                  ['key' => 'lugar_ubicacion','nombre' => 'Agencia'],
                  ['key' => 'aceptacion_tyc','nombre' => true]
              ]
          ]
        ];
    }
    /**
     * A basic feature test example.
     * @test
     * @return void
     */
    public function omniChannelTest()
    {
        Http::fake([
            env('inconcertWS') => Http::response([
                'status' => true,
                'description' => 'OK',
                'data' => [
                    "status" => "new",
                    "contactId" => "contactId"
                ]
            ], 200)
        ]);

        $response = $this->json('POST', $this->baseUrl . 'c2cOmnichannel', $this->dataOmnichannel);
        $response->assertStatus(202);

        Http::assertSent(function (Request $request) {
            return $request->url() == env('inconcertWS') &&
                $request['contactData']['numero_identificacion'] == $this->dataOmnichannel["numero_identificacion"] &&
                $request['contactData']['email'] == $this->dataOmnichannel["email"] &&
                $request['contactData']['firstname'] == $this->dataOmnichannel["nombres"] &&
                $request['contactData']['lastname'] == $this->dataOmnichannel["apellidos"] &&
                $request['contactData']['mobile'] == $this->dataOmnichannel["celular"] &&
                $request['contactData']['phone'] == $this->dataOmnichannel["celular"] &&
                $request['contactData']['Modelo'] == "Yaris Sedan TM" &&
                $request['contactData']['vehiculo_version'] == "XLE" &&
                $request['contactData']['lugar_ubicacion'] == "Agencia" &&
                $request['contactData']['aceptacion_tyc'] == true &&
                $request['serviceAction'] == "c2c" &&
                $request['contentUrl'] ==  $this->dataOmnichannel["datos_adicionales"]["pageUrl"] &&
                $request['thankyouPageUrl'] ==  $this->dataOmnichannel["datos_adicionales"]["pageUrl"] &&
                $request['serviceToken'] == $this->dataOmnichannel["tokenC2C"];

        });
    }
    /**
     * A basic feature test example.
     * @test
     * @return void
     */
    public function omniChannelWithouAdittionalDataTest()
    {
        Http::fake([
            env('inconcertWS') => Http::response([
                'status' => true,
                'description' => 'OK',
                'data' => [
                    "status" => "new",
                    "contactId" => "contactId"
                ]
            ], 200)
        ]);

        $this->dataOmnichannel = [
            "numero_identificacion" => "171542654",
            "email" => "test@gmail.com",
            "nombres" => "María",
            "apellidos" => "Rodríguez",
            "celular" => "0987510142",
            "tokenC2C" => "12345647897987987",
        ];

        $response = $this->json('POST', $this->baseUrl . 'c2cOmnichannel', $this->dataOmnichannel);
        $response->assertStatus(202);

        Http::assertSent(function (Request $request) {
            return $request->url() == env('inconcertWS') &&
                $request['contactData']['numero_identificacion'] == $this->dataOmnichannel["numero_identificacion"] &&
                $request['contactData']['email'] == $this->dataOmnichannel["email"] &&
                $request['contactData']['firstname'] == $this->dataOmnichannel["nombres"] &&
                $request['contactData']['lastname'] == $this->dataOmnichannel["apellidos"] &&
                $request['contactData']['mobile'] == $this->dataOmnichannel["celular"] &&
                $request['contactData']['phone'] == $this->dataOmnichannel["celular"] &&
                $request['serviceAction'] == "c2c" &&
                $request['serviceToken'] == $this->dataOmnichannel["tokenC2C"];

        });
    }
    /**
     * A basic feature test example.
     * @test
     * @return void
     */
    public function omniChannelWithouPageDataTest()
    {
        Http::fake([
            env('inconcertWS') => Http::response([
                'status' => true,
                'description' => 'OK',
                'data' => [
                    "status" => "new",
                    "contactId" => "contactId"
                ]
            ], 200)
        ]);

        $this->dataOmnichannel = [
            "numero_identificacion" => "171542654",
            "email" => "test@gmail.com",
            "nombres" => "María",
            "apellidos" => "Rodríguez",
            "celular" => "0987510142",
            "tokenC2C" => "12345647897987987",
            "datos_adicionales" => [
                "pageUrl" => "www.landing.com"
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'c2cOmnichannel', $this->dataOmnichannel);
        $response->assertStatus(202);

        Http::assertSent(function (Request $request) {
            return $request->url() == env('inconcertWS') &&
                $request['contactData']['numero_identificacion'] == $this->dataOmnichannel["numero_identificacion"] &&
                $request['contactData']['email'] == $this->dataOmnichannel["email"] &&
                $request['contactData']['firstname'] == $this->dataOmnichannel["nombres"] &&
                $request['contactData']['lastname'] == $this->dataOmnichannel["apellidos"] &&
                $request['contactData']['mobile'] == $this->dataOmnichannel["celular"] &&
                $request['contactData']['phone'] == $this->dataOmnichannel["celular"] &&
                $request['serviceAction'] == "c2c" &&
                $request['serviceToken'] == $this->dataOmnichannel["tokenC2C"];

        });
    }
    /**
     * @test
     * @return void
     */
    public function omniChannelRequestTest()
    {
        $response = $this->json('POST', $this->baseUrl . 'c2cOmnichannel', []);
        $content = json_decode($response->content());

        $this->assertEquals($content->errors->tokenC2C[0], 'TokenC2C es requerido');
        $this->assertEquals($content->errors->nombres[0], 'Nombres es requerido');
        $this->assertEquals($content->errors->apellidos[0], 'Apellidos es requerido');
        $this->assertEquals($content->errors->celular[0], 'Celular es requerido');
        $this->assertEquals($content->errors->email[0], 'Email es requerido');

        $response->assertStatus(422);
    }
}
