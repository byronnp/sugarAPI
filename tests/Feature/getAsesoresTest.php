<?php

namespace Tests\Feature;

use App\Models\Agencies;
use App\Models\BusinessLine;
use App\Models\Companies;
use App\Models\EmailAddrBeanRel;
use App\Models\EmailAddreses;
use App\Models\LineaNegocioUsers;
use App\Models\SugarUsersBlocked;
use App\Models\User;
use App\Models\Users;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class getAsesoresTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Companies::factory()->create();
        Sanctum::actingAs(
            User::factory()->create(),
            ['environment:dev']
        );
    }

    /** @test */
    public function getAsesores()
    {
        $usersBlocked = new SugarUsersBlocked();
        $usersBlocked->sugar_user_id = '10296f94-ebf3-42a8-a42d-5c880a18abca'; //10296f94-ebf3-42a8-a42d-5c880a18abca CG_RAMOS
        $usersBlocked->sources_blocked = '1,5';
        $usersBlocked->status = 'inactive';
        $usersBlocked->save();

        $response = $this->json('GET', $this->baseUrl . 'asesores?medio=5');
        $content = json_decode($response->content());
        $content_users = $content->data;

        $existsUser = array_search('CG_RAMOS', array_column($content_users, 'user_name'));

        $this->assertEquals($existsUser, false);

        $users = Users::where('status', 'Active')
            ->where('deleted', 0)
            ->join('users_cstm', 'users.id', '=', 'users_cstm.id_c')
            ->select('id', 'first_name', 'last_name', 'phone_mobile', 'user_name', 'cb_agencias_id_c')
            ->where('cargo_c', 2)->get();

        $user = $users[0];
        $agency = Agencies::where('id', $user->cb_agencias_id_c)->select('name')->first();
        $user->agencia = $agency ? $agency->name : '';

        $lines = LineaNegocioUsers::where('cb_lineanegocio_usersusers_idb', $user->id)
            ->where('deleted', 0)
            ->pluck('cb_lineanegocio_userscb_lineanegocio_ida');


        $user->lineas_negocio = BusinessLine::whereIn('id', $lines)->pluck('name');

        $this->assertEquals($users[0]->first_name, $content->data[0]->nombres);
        $this->assertEquals($users[0]->last_name, $content->data[0]->apellidos);
        $this->assertEquals($users[0]->phone_mobile, $content->data[0]->celular);
        $this->assertEquals($users[0]->user_name, $content->data[0]->user_name);
        $this->assertEquals($user->agencia, $content->data[0]->agencia);
        $this->assertEquals(json_decode($user->lineas_negocio), $content->data[0]->lineas_negocio);

        $response->assertStatus(200);
    }
}
