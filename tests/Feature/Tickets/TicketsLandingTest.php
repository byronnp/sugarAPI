<?php

namespace Tests\Feature;

use App\Models\BusinessLine;
use App\Models\Companies;
use App\Models\LandingPages;
use App\Models\Medio;
use App\Models\Tickets;
use App\Models\User;
use App\Models\Ws_logs;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class TicketsLandingTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    public $dataLanding = [];
    public $dataCreateLanding = [];
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Companies::factory()->create();
        $this->user_admin = new User();
        $this->user_admin->name = 'adminPrueba';
        $this->user_admin->email = 'autorizadorTesting@gmail.com';
        $this->user_admin->admin = 1;
        $this->user_admin->password = bcrypt('autorizador');
        $this->user_admin->save();

        $this->setInitDataUserSanctum();

        $this->dataCreateLanding = [
            "name" => "Exonerados",
            "medio" => "18",
            "autorizador" => "autorizadorTesting@gmail.com",
            "properties_form" =>
                [
                    ["label" => "Tipo de discapacidad",
                       "value" => "tipo_discapacidad",
                       "validations" => "required"
                    ],
                    ["label" => "Porcentaje de discapacidad",
                       "value" => "porcentaje_discapacidad",
                       "validations" => "required|in:30_49,50_74,75_84,85_100"
                    ],
                    ["label" => "Vehiculo",
                       "value" => "modelo",
                       "validations" => "required"
                    ],
                    ["label" => "Version",
                       "value" => "version",
                       "validations" => "required"
                    ],
                    ["label" => "Concesionario",
                       "value" => "concesionario",
                       "validations" => "required"
                    ],
                    ["label" => "Direccion",
                       "value" => "direccion"
                    ],
                    ["label" => "Tipo de Exoneración",
                       "value" => "plan"
                    ],
                    ["label" => "Fecha",
                       "value" => "fecha_creacion"
                    ]
                ],
            "business_line_id" => "f417e1ae-a81b-11e9-ab2c-000c297d72b1",
            "user_login" => "tests_source",
            "type_transaction" => "1",
            "user_assigned_position" => "2",
            "campaign" => "0626c2b0-1ad2-11ea-830b-000c297d72b1"
        ];

        $this->json('POST', $this->baseUrl . "create_landing_page", $this->dataCreateLanding);

        $this->dataLanding = [
            'datosSugarCRM' => [
              "formulario"=> "Exonerados",
              "tipo_identificacion"=> "C",
              "numero_identificacion"=> "1003088414",
              "nombres"=> $this->faker()->name,
              "apellidos"=> $this->faker()->lastName,
              "celular"=> $this->faker()->numerify('##########'),
              "telefono"=> $this->faker()->numerify('#########'),
              "email"=> "prueba@gmail.com",
              "concesionario"=> "Quito (Casabaca)",
              "provincia"=> "",
              "ciudad"=> "",
              "direccion"=> $this->faker()->address,
              "modelo"=> "hilux-at",
              "version"=> "hilux-at-Hilux CD 2.7 Gas 4x2",
              "plan"=> "diplomaticos-y-ong",
              "tipo_discapacidad"=> "discapacitados",
              "porc_discapacidad"=> "85 - 100%",
              "comentarios"=> "test test test",
              "fecha_creacion"=> "2020-08-28 16:09:40",
              "porcentaje_discapacidad" => "30_49",
            ]
        ];
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testCreateTicketLandingPage()
    {
        Tickets::where('numero_identificacion', $this->dataLanding['datosSugarCRM']['numero_identificacion'])->update(["estado" => 7]);

        $response = $this->json('POST', $this->baseUrl . 'landing_ticket', $this->dataLanding);
        $content = json_decode($response->content());
        $response->assertStatus(200);
        $this->assertNotNull($content->data->ticket_id);
        $this->assertNotNull($content->data->ticket_name);
        $this->assertNotNull($content->data->interaction_id);

        $landingPage = LandingPages::where('name', $this->dataLanding['datosSugarCRM']["formulario"])->first();
        $medio = Medio::find($landingPage->medio);

        $comentario =  $this->dataLanding["datosSugarCRM"]["comentarios"] ?? null;

        $properties = $landingPage->properties_form;
        foreach ($properties as $property) {
            $comentario .= " ".$property["label"] . ": " . $this->dataLanding["datosSugarCRM"][$property["value"]];
        }

        $ticket = Tickets::find($content->data->ticket_id);

        $this->assertEquals($this->dataLanding['datosSugarCRM']['numero_identificacion'], $ticket->numero_identificacion);
        $this->assertEquals($comentario, $ticket->description);
        $this->assertNotNull($ticket->assigned_user_id);
        $this->assertEquals($medio->fuente_id, $ticket->fuente);
        $this->assertEquals($medio->id, $ticket->ticketsCstm->medio_c);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['tipo_identificacion'], $ticket->tipo_identificacion);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['email'], $ticket->email);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['nombres'], $ticket->nombres);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['nombres'], $ticket->nombres);
        $this->assertEquals(1, $ticket->estado);
        $this->assertEquals(getIdLineaNegocioToWebServiceID($landingPage->business_line_id), $ticket->linea_negocio);
        $this->assertEquals($ticket->ticketsCstm->id_c, $ticket->id);
        $this->assertEquals($ticket->estado, $ticket->ticketsCstm->flag_estados_c);
        $this->assertEquals($ticket->ticketsCstm->porcentaje_discapacidad_c, $this->dataLanding['datosSugarCRM']['porcentaje_discapacidad']);
        $this->assertEquals($landingPage->campaign, $ticket->ticketsCstm->campaign_id_c);

        $interactionLine = BusinessLine::find($landingPage->business_line_id);
        $interaction = $ticket->interacciones[0];

        $this->assertEquals($this->dataLanding['datosSugarCRM']['numero_identificacion'], $interaction->numero_identificacion);
        $this->assertEquals($medio->fuente_id, $interaction->fuente);
        $this->assertNotNull($interaction->assigned_user_id);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['tipo_identificacion'], $interaction->tipo_identificacion);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['email'], $interaction->email);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['nombres'], $interaction->nombre);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['apellidos'], $interaction->apellidos);
        $this->assertEquals($landingPage->business_line_id, $interaction->cb_lineanegocio_id_c);
        $this->assertEquals($interactionLine->name, $interaction->linea_negocio);
        $interactionCstm = $interaction->interaccionesCstm()->first();
        $this->assertEquals($medio->id, $interactionCstm->medio_c);
        $this->assertEquals($landingPage->campaign, $interactionCstm->campaign_id_c);
    }

    public function testValidateDataLandingTicket()
    {
        $data = [
            'datosSugarCRM' => [
                'formulario' => 'Exonerados'
                ]
            ];

        $response = $this->json('POST', $this->baseUrl . 'landing_ticket', $data);
        $content = json_decode($response->content());


        $err_numero_identificacion = 'datosSugarCRM.numero_identificacion';
        $err_tipo_identificacion = 'datosSugarCRM.tipo_identificacion';
        $err_nombres = 'datosSugarCRM.nombres';
        $err_apellidos = 'datosSugarCRM.apellidos';
        $err_celular = 'datosSugarCRM.celular';
        $err_email = 'datosSugarCRM.email';
        $err_concesionario = 'datosSugarCRM.concesionario';
        $err_porcentaje_discapacidad = 'datosSugarCRM.porcentaje_discapacidad';
        $err_tipo_discapacidad = 'datosSugarCRM.tipo_discapacidad';
        $err_porc_discapacidad = 'datosSugarCRM.porc_discapacidad';
        $err_modelo = 'datosSugarCRM.modelo';
        $err_version = 'datosSugarCRM.version';

        $response->assertStatus(422);

        $this->assertEquals($content->errors->$err_numero_identificacion[0], 'Número identificación es requerido');
        $this->assertEquals($content->errors->$err_tipo_identificacion[0], 'Tipo identificación es requerido');
        $this->assertEquals($content->errors->$err_nombres[0], 'Nombres son requeridos');
        $this->assertEquals($content->errors->$err_apellidos[0], 'Apellidos son requeridos');
        $this->assertEquals($content->errors->$err_celular[0], 'Celular es requerido');
        $this->assertEquals($content->errors->$err_email[0], 'Email es requerido');
        $this->assertEquals($content->errors->$err_concesionario[0], 'Concesionario es requerido');
        $this->assertEquals($content->errors->$err_porcentaje_discapacidad[0], 'El campo datos sugar c r m.porcentaje discapacidad es requerido.');
        $this->assertEquals($content->errors->$err_tipo_discapacidad[0], 'El campo datos sugar c r m.tipo discapacidad es requerido.');
        $this->assertEquals($content->errors->$err_modelo[0], 'El campo datos sugar c r m.modelo es requerido.');
        $this->assertEquals($content->errors->$err_version[0], 'El campo datos sugar c r m.version es requerido.');
    }

    public function testCreateWsLogLandingPage()
    {
        Tickets::where('numero_identificacion', $this->dataLanding['datosSugarCRM']['numero_identificacion'])->update(["estado" => 7]);

        $response = $this->json('POST', $this->baseUrl . 'landing_ticket', $this->dataLanding);
        $content = json_decode($response->content());
        $response->assertStatus(200);

        $wsLogs = Ws_logs::where('route', 'api/landing_ticket')->where('ticket_id', $content->data->ticket_id)->first();
        $this->assertJson(json_encode($this->dataLanding), $wsLogs->datos_sugar_crm);
        $this->assertEquals('sugar_dev', $wsLogs->environment);
        $this->assertEquals('tests_source', $wsLogs->source);
        $this->assertEquals($content->data->interaction_id, $wsLogs->interaccion_id);
    }
}
