<?php

namespace Tests\Feature;

use App\Models\Interacciones;
use App\Models\Notes;
use App\Models\Prospeccion;
use App\Models\ProspeccionNotes;
use App\Models\TicketsNotes;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Http;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class NotesTicketTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    public $data = [];
    public $content_created;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setInitDataUserSanctum();

        $this->data = [
            'datosSugarCRM' => [
                'numero_identificacion' => $this->faker->numerify('##########'),
                'tipo_identificacion' => 'C',
                'email' => 'frvr@gmail.com',
                'user_name' => 'CG_RAMOS',
                'nombres' => 'FREDDY ROBERTO',
                'apellidos' => 'VARGAS RODRIGUEZ',
                'celular' => '0987519726',
                'telefono' => '022072826',
                'estado' => '1',
                'motivo_cierre' => 'no_contesta',
                'linea_negocio' => '2',
                'tipo_transaccion' => '1',
                'marca' => '1',
                'modelo' => '1',
                'anio' => '2020',
                'placa' => 'PCY7047',
                'kilometraje' => '190000',
                'color' => 'GRIS',
                'asunto' => 'molestias',
                'id_interaccion_inconcert' => 'id_interaccion_inconcert',
                'comentario_cliente' => 'comentario_cliente',
                'description' => 'description',
                'porcentaje_discapacidad' => '30_49',
                'medio' => '5'
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'tickets', $this->data);
        $this->content_created = json_decode($response->content());
    }

    /** @test */
    public function createNotesTickets()
    {
        $data = [
            'datosSugarCRM' => [
                'notes' => 'Testing Notes',
                'interaction' =>  $this->content_created->data->interaction_id
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'ticket/addNotes/'. $this->content_created->data->ticket_id, $data);

        $content_update = json_decode($response->content());
        $response->assertStatus(200);
        $this->assertEquals($content_update->data->ticket_id, $this->content_created->data->ticket_id);

        $ticketNotes = TicketsNotes::where('cbt_tickets_notescbt_tickets_ida', $this->content_created->data->ticket_id)->first();
        $interaction = Interacciones::find($this->content_created->data->interaction_id);
        $notes = Notes::find($ticketNotes->cbt_tickets_notesnotes_idb);
        $this->assertEquals($interaction->name .' Agente Inconcert', $notes->name);
        $this->assertEquals($data['datosSugarCRM']['notes'], $notes->description);
    }

    /** @test */
    public function createNotesWithoutNotes()
    {
        $data = [
            'datosSugarCRM' => [
                'notes' => '',
                'interaction' => 'IntextactNotExists'
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'ticket/addNotes/'. $this->content_created->data->ticket_id, $data);
        $response->assertStatus(422);
        $content_update = json_decode($response->content());
        $err_notes = 'datosSugarCRM.notes';
        $err_interaction = 'datosSugarCRM.interaction';
        $this->assertEquals("Notes es requerido", $content_update->errors->$err_notes[0]);
        $this->assertEquals("Id interaction no válida", $content_update->errors->$err_interaction[0]);
    }

    /** @test */
    public function createNotesInvalidTicket()
    {
        $data = [
            'datosSugarCRM' => [
                'notes' => 'Testing Notes',
                'interaction' =>  $this->content_created->data->interaction_id
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'ticket/addNotes/NotExistsId', $data);

        $content_update = json_decode($response->content());
        $response->assertStatus(404);
        $this->assertEquals("Ticket no existe, id inválido", $content_update->error);
    }

    /** @test */
    public function createNotesTicketsProspeccion()
    {
        $prospeccion = Prospeccion::factory()->create();
        $data = [
            'datosSugarCRM' => [
                'notes' => 'Testing Notes',
                'interaction' =>  $this->content_created->data->interaction_id,
                'prospeccion' =>  $prospeccion->id
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'ticket/addNotes/'. $this->content_created->data->ticket_id, $data);

        $content_update = json_decode($response->content());
        $response->assertStatus(200);
        $this->assertEquals($content_update->data->ticket_id, $this->content_created->data->ticket_id);

        $ticketNotes = ProspeccionNotes::where('cbp_prospeccion_notescbp_prospeccion_ida', $prospeccion->id)->first();
        $notes = Notes::find($ticketNotes->cbp_prospeccion_notesnotes_idb);
        $this->assertEquals($data['datosSugarCRM']['notes'], $notes->description);
    }

    /** @test */
    public function createNotesInTicket()
    {
        $data = [
            'datosSugarCRM' => [
                'notes' => 'Testing Notes'
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'ticket/addNotes/'. $this->content_created->data->ticket_id, $data);

        $content_update = json_decode($response->content());
        $response->assertStatus(200);
        $this->assertEquals($content_update->data->ticket_id, $this->content_created->data->ticket_id);

        $ticketNotes = TicketsNotes::where('cbt_tickets_notescbt_tickets_ida', $this->content_created->data->ticket_id)->first();

        $notes = Notes::find($ticketNotes->cbt_tickets_notesnotes_idb);
        $this->assertEquals($data['datosSugarCRM']['notes'], $notes->description);
    }
}
