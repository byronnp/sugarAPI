<?php

namespace Tests\Feature;

use App\Models\Companies;
use App\Services\TicketClass;
use App\Models\Tickets;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Http;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class CarMatchTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    protected function setUp(): void
    {
      parent::setUp(); // TODO: Change the autogenerated stub
      $this->setInitDataUser();
    }

    /** @test */

    public function getS3SCarMatch()
    {
      Http::fake([
        env('s3sCarMatch') => Http::response([
          'totalPaginas' => 1,
          'paginaActual' => 0,
          'resultado' => [
          ["publicacionId" => "1571713", "scoreTotal" => 0.8],
          ["publicacionId" => "1571710", "scoreTotal" => 0.6]
        ]
        ], 200)
      ]);

      $ticketClass = new TicketClass();
      $ticketClass->precio_c = '25000';
      $ticketClass->combustible_c = 'gasolina';
      $ticketClass->kilometraje_c = '30000';
      $ticketClass->anio_min_c = '2019';
      $ticketClass->anio_max_c = '2020';
      $ticketClass->color_c = 'negro';
      $ticketClass->marca_c = '18';
      $ticketClass->modelo_c = '110';
      $ticket = $ticketClass->create();
      $response = $this->get('/s3sCarMatch/' . $ticket->id);

      $content = json_decode($response->content());

      $response->assertStatus(202);
      $this->assertEquals($content->cars[0]->scoreTotal, '0.8');
      $this->assertEquals($content->cars[1]->scoreTotal, '0.6');
    }
}
