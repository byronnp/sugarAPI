<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class SugarUserBlockedTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setInitDataUser();
    }

    /** @test */
    public function storeSugarUserBlocked()
    {
        $data = [
            "sugar_user_id" => "0cbcf290-8237-11e9-a9c0-321e7492db35",
            "date_unblocked" => "2099-12-31",
            "user_creation" => "admin",
            "user_modified" => "admin",
            "sources_blocked" => "inconcert",
            "status" => "inactive",
            "sugar_user_agency" => "0cbcf290-8888-11e9-a9c0-321e7492db35"
        ];

        $response = $this->post('/sugarUserBlocked', $data);
        $content = json_decode($response->content());

        $response->assertStatus(202);
        $this->assertEquals($data["sugar_user_id"], $content->userBlocked->sugar_user_id);
        $this->assertEquals($data["date_unblocked"], $content->userBlocked->date_unblocked);
        $this->assertEquals($data["user_creation"], $content->userBlocked->user_creation);
        $this->assertEquals($data["user_modified"], $content->userBlocked->user_modified);
        $this->assertEquals($data["sources_blocked"], $content->userBlocked->sources_blocked);
        $this->assertEquals($data["sugar_user_agency"], $content->userBlocked->sugar_user_agency);
        $this->assertEquals($data["status"], $content->userBlocked->status);
    }

    /** @test */
    public function storeSugarUserBlockedErrors()
    {
        $data = [
            "sugar_user_id" => "0cbcf290-8237-11e9-a9c0-321e7492db34",
            "user_creation" => "admin",
            "user_modified" => "admin",
            "sugar_user_agency" => "0cbcf290-8888-11e9-a9c0-321e7492db35"
        ];

        $response = $this->post('/sugarUserBlocked', $data);
        $content = json_decode($response->content());

        $response->assertStatus(422);
        $this->assertEquals($content->errors->sugar_user_id[0], 'Id Usuario no existe');
        $this->assertEquals($content->errors->sources_blocked[0], 'Fuentes a bloquear es requerido');
    }
}
