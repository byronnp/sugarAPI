<?php

namespace Tests\Feature;

use App\Models\Calls;
use App\Models\Tickets;
use App\Models\User;
use App\Models\Ws_logs;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Http;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class TicketsCallTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    public $data = [];
    public $dataCall = [];
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setInitDataUserSanctum();

        $this->data = [
            'datosSugarCRM' => [
                'numero_identificacion' => $this->faker->numerify('##########'),
                'tipo_identificacion' => 'C',
                'email' => 'frvr@gmail.com',
                'user_name' => 'XI_VALDES',
                'nombres' => 'PEPITO',
                'apellidos' => 'SUAREZ',
                'celular' => '0987519726',
                'telefono' => '022072826',
                'estado' => '1',
                'motivo_cierre' => 'no_contesta',
                'linea_negocio' => '2',
                'tipo_transaccion' => '1',
                'marca' => '28',
                'modelo' => '2',
                'asunto' => 'molestias',
                'id_interaccion_inconcert' => 'id_interaccion_inconcert',
                'comentario_cliente' => 'comentario_cliente',
                'description' => 'description',
                'porcentaje_discapacidad' => '30_49',
                'medio' => 5,
                'campania' => '5e686580-ee19-11ea-97ea-000c297d72b1'
            ]
        ];

        $this->dataCall = [
            'datosSugarCRM' => [
                'user_name_call_center' => 'XI_VALDES', //2fa28a3f-9a39-3d63-4729-5b7353ef1fd9 //2fa28a3f-9a39-3d63-4729-5b7353ef1fd9
                'date_start' => '2021-12-24 19:59',
                'duration_hours' => '0',
                'duration_minutes' => '10',
                'status' => 'Held',
                'direction' => 'Outbound',
                'type' => 'seguimiento',
                'category' => '2',
                'notes' => 'Llamar el día lunes',
                'ticket' => [
                    'id' => 'ticketID',
                    'is_closed' => true,
                    'motivo_cierre' => 'no_contesta'
                ]
            ]
        ];
    }

    /** @test */
    public function create_ticket_succesfull()
    {
        $response = $this->json('POST', $this->baseUrl . 'call_ticket', $this->data);
        $content = json_decode($response->content());

        $response->assertStatus(200);
        $this->assertNotNull($content->data->ticket_id);
        $this->assertNotNull($content->data->ticket_name);
        $this->assertEquals('https://sugarcrm.casabaca.com/#cbt_Tickets/'. $content->data->ticket_id, $content->data->ticket_url);

        $ticket = Tickets::find($content->data->ticket_id);
        $this->assertEquals($ticket->numero_identificacion, $this->data['datosSugarCRM']['numero_identificacion']);
        $this->assertEquals($ticket->fuente, '2');
        $this->assertEquals($ticket->tipo_identificacion, $this->data['datosSugarCRM']['tipo_identificacion']);
        $this->assertEquals($ticket->email, $this->data['datosSugarCRM']['email']);
        $this->assertEquals($ticket->nombres, $this->data['datosSugarCRM']['nombres']);
        $this->assertEquals($ticket->estado, $this->data['datosSugarCRM']['estado']);
        $this->assertEquals($ticket->linea_negocio, $this->data['datosSugarCRM']['linea_negocio']);
        $this->assertEquals($ticket->id, $ticket->ticketsCstm->id_c);
        $this->assertEquals($ticket->estado, $ticket->ticketsCstm->flag_estados_c);
        $this->assertEquals($ticket->ticketsCstm->porcentaje_discapacidad_c, $this->data['datosSugarCRM']['porcentaje_discapacidad']);
        $this->assertEquals($ticket->ticketsCstm->medio_c, $this->data['datosSugarCRM']['medio']);
        $this->validateWSLogsCall($ticket);
    }

    public function validateWSLogsCall($ticket){
        $wsLogs = Ws_logs::where('ticket_id', $ticket->id)->where('route', 'api/call_ticket')->first();

        $this->assertJson(json_encode($this->data), $wsLogs->datos_sugar_crm);
        $this->assertEquals($ticket->id, $wsLogs->ticket_id);
        $this->assertEquals('sugar_dev', $wsLogs->environment);
        $this->assertEquals('tests_source', $wsLogs->source);
    }

    /** @test */
    public function create_ticket_with_data_invalid()
    {
        $data = [
            'datosSugarCRM' => [
                'tipo_identificacion'=>'001',
                'email'=>'roberto@gmailcom',
                'nombres'=>'Prueba',
                'estado'=> 100,
                'linea_negocio'=>  1000,
                'user_name'=>  'CG_RAMOS'
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'call_ticket', $data);
        $content = json_decode($response->content());

        $response->assertStatus(422);
        $err_no_identificacion = 'datosSugarCRM.numero_identificacion';
        $err_tipo_identificacion = 'datosSugarCRM.tipo_identificacion';
        $err_linea_negocio = 'datosSugarCRM.linea_negocio';
        $err_email = 'datosSugarCRM.email';

        $this->assertEquals($content->errors->$err_no_identificacion[0], 'Identificación es requerida');
        $this->assertEquals($content->errors->$err_tipo_identificacion[0], 'Tipo de identificación no contiene un valor válido, valores válidos: C(Cedula),P(Pasaporte), R(RUC)');
        $this->assertEquals($content->errors->$err_linea_negocio[0], 'Linea no contiene un valor válido, valores válidos: 1(Postventa),2(Nuevos), 3(Seminuevos), 4(Exonerados)');
        $this->assertEquals($content->errors->$err_email[0], 'Email debe ser un email válido');
    }

    /** @test */
    public function create_ticket_with_data_incomplete()
    {
        $data = [
            'datosSugarCRM' => [
                'numero_identificacion'=>'1234567890',
                'email'=>'roberto@gmail.com',
                'nombres'=>'Prueba',
                'linea_negocio'=>  1000
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'call_ticket', $data);
        $content = json_decode($response->content());
        $response->assertStatus(422);
        $err_tipo_identificacion = 'datosSugarCRM.tipo_identificacion';

        $this->assertEquals($content->errors->$err_tipo_identificacion[0], 'Tipo de identificación es requerida para el número de identificación');
    }

    /** @test */
    public function create_ticket_with_invalid_username()
    {
        $data = [
            'datosSugarCRM' => [
                'numero_identificacion'=>'1234567891002',
                'tipo_identificacion'=>'C',
                'email'=>'roberto@gmail.com',
                'celular'=>'0987517283',
                'nombres'=>'Prueba',
                'apellidos'=>'Apellidos',
                'estado'=> 4,
                'linea_negocio'=>  4,
                'user_name'=> 'not_exists',
                'id_interaccion_inconcert' => 'id_interaccion_inconcert',
                'tipo_transaccion' => '1'
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'call_ticket', $data);
        $content = json_decode($response->content());
        $response->assertStatus(422);
        $err_user_name = 'datosSugarCRM.user_name';

        $this->assertEquals($content->errors->$err_user_name[0], 'User-name inválido, asesor  no se encuentra registrado');
    }

    /** @test */
    public function create_contact_ticket_success()
    {
        $response = $this->json('POST', $this->baseUrl . 'call_ticket', $this->data);
        $content = json_decode($response->content());
        $response->assertStatus(200);
        $this->assertNotNull($content->data->ticket_id);
        $this->assertNotNull($content->data->ticket_name);

        $ticket = Tickets::find($content->data->ticket_id);
        $contact = $ticket->contacts()->first();
        $emailContact = $contact->emailAddress()->first();

        $this->assertEquals("PEPITO",$contact->first_name);
        $this->assertEquals("SUAREZ",$contact->last_name);
        $this->assertEquals("frvr@gmail.com",$emailContact->email_address);
    }

    /** @test */
    public function close_call_ticket_succesfull()
    {
        $response = $this->json('POST', $this->baseUrl . 'call_ticket', $this->data);
        $contentTicket = json_decode($response->content());
        $this->dataCall["datosSugarCRM"]["ticket"]["id"] = $contentTicket->data->ticket_id;

        $response = $this->json('POST', $this->baseUrl . 'calls', $this->dataCall);
        $contentCall = json_decode($response->content());
        $this->assertNotNull($contentCall->data->call_id);
        $this->assertEquals($contentTicket->data->ticket_id, $contentCall->data->ticket_id);

        $call = Calls::find($contentCall->data->call_id);
        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $call->modified_user_id);
        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $call->created_by);
        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $call->assigned_user_id);
        $this->assertEquals("Llamar el día lunes", $call->description);
        $this->assertEquals(0, $call->deleted);
        $this->assertEquals(0, $call->duration_hours);
        $this->assertEquals(10, $call->duration_minutes);
        $this->assertEquals("2021-12-24 19:59:00", $call->date_start);
        $this->assertEquals("2021-12-24 20:09:00", $call->date_end);
        $this->assertEquals("cbt_Tickets", $call->parent_type);
        $this->assertEquals($contentTicket->data->ticket_id, $call->parent_id);
        $this->assertEquals('Held', $call->status);
        $this->assertEquals('Outbound', $call->direction);

        $ticket = Tickets::find($contentTicket->data->ticket_id);
        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $ticket->assigned_user_id);
        $this->assertEquals("no_contesta", $ticket->proceso);
        $this->assertEquals("7", $ticket->estado);

        $this->validateWSLogsCallTicketClosed($call, $ticket);
    }

    public function validateWSLogsCallTicketClosed($call, $ticket){
        $wsLogs = Ws_logs::where('call_id', $call->id)->where('route', 'api/calls/')->first();

        $this->assertJson(json_encode($this->dataCall), $wsLogs->datos_sugar_crm);
        $this->assertEquals($ticket->id, $wsLogs->ticket_id);
        $this->assertEquals('sugar_dev', $wsLogs->environment);
        $this->assertEquals('tests_source', $wsLogs->source);
    }

    /** @test */
    public function create_ticket_call_not_answer()
    {
        $response = $this->json('POST', $this->baseUrl . 'call_ticket', $this->data);
        $contentTicket = json_decode($response->content());

        $dataCallNotAnswer = [
            'datosSugarCRM' => [
                'user_name_call_center' => 'XI_VALDES', //2fa28a3f-9a39-3d63-4729-5b7353ef1fd9 //2fa28a3f-9a39-3d63-4729-5b7353ef1fd9
                'date_start' => '2021-12-24 19:59',
                'duration_hours' => '0',
                'duration_minutes' => '10',
                'direction' => 'Outbound',
                'ticket_id' => $contentTicket->data->ticket_id
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'not_answer_call', $dataCallNotAnswer);
        $contentCall = json_decode($response->content());

        $ticket = Tickets::find($contentTicket->data->ticket_id);
        $statusEnGestion = 4;
        $this->assertEquals($statusEnGestion, $ticket->estado);

        $call = Calls::find($contentCall->data->call_id);

        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $call->modified_user_id);
        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $call->created_by);
        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $call->assigned_user_id);
        $this->assertEquals($dataCallNotAnswer["datosSugarCRM"]["direction"], $call->direction);
        $this->assertEquals("no_aplica", $call->callsCstm->categoria_llamada_c);
        $this->assertEquals("PEPITO SUAREZ - Cel:0987519726", $call->callsCstm->info_contacto_c);
        $this->assertEquals("TK", $call->callsCstm->origen_creacion_c);
        $this->assertEquals("N", $call->callsCstm->tiene_quejas_c);
        $this->assertEquals("seguimiento", $call->callsCstm->tipo_llamada_c);
        $this->assertEquals("PEPITO SUAREZ", $call->name);
        $this->assertEquals("2021-12-24 19:59:00", $call->date_start);
        $this->assertEquals("2021-12-24 20:09:00", $call->date_end);
        $this->assertEquals("cbt_Tickets", $call->parent_type);
        $this->assertEquals("Held", $call->status);
        $this->assertEquals($contentTicket->data->ticket_id, $call->parent_id);

        $ticketCall = $call->tickets()->first();
        $this->assertEquals($contentTicket->data->ticket_id, $ticketCall->id);

        $this->validateWSLogsCallNotAnswer($call, $ticket, $dataCallNotAnswer);
    }

    /** @test */
    public function create_ticket_call_not_answer_with_incomplete_data()
    {
        $dataCallNotAnswer = [
            'datosSugarCRM' => [
                'user_name_call_center' => 'NOT_EXISTS',
                'ticket_id' => 'NOT_EXISTS'
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'not_answer_call', $dataCallNotAnswer);
        $contentCall = json_decode($response->content());
        $err_user_call_center = 'datosSugarCRM.user_name_call_center';
        $err_date_start = 'datosSugarCRM.date_start';
        $err_duration_hours = 'datosSugarCRM.duration_hours';
        $err_duration_minutes = 'datosSugarCRM.duration_minutes';
        $err_direction = 'datosSugarCRM.direction';
        $err_ticket = 'datosSugarCRM.ticket_id';

        $this->assertEquals($contentCall->errors->$err_user_call_center[0], 'User-name inválido, call center no se encuentra registrado');
        $this->assertEquals($contentCall->errors->$err_date_start[0], 'La fecha de inicio de llamada es requerida');
        $this->assertEquals($contentCall->errors->$err_duration_hours[0], 'Duration_hours es requerido');
        $this->assertEquals($contentCall->errors->$err_duration_minutes[0], 'Duration_minutes es requerido');
        $this->assertEquals($contentCall->errors->$err_direction[0], 'Direction es requerido');
        $this->assertEquals($contentCall->errors->$err_ticket[0], 'Ticket inválido, id no existe');
    }

    public function validateWSLogsCallNotAnswer($call, $ticket, $dataCallNotAnswer){
        $wsLogs = Ws_logs::where('call_id', $call->id)->where('route', 'api/not_answer_call')->first();

        $this->assertJson(json_encode($dataCallNotAnswer), $wsLogs->datos_sugar_crm);
        $this->assertEquals($ticket->id, $wsLogs->ticket_id);
        $this->assertEquals('sugar_dev', $wsLogs->environment);
        $this->assertEquals('tests_source', $wsLogs->source);
    }
}
