<?php

namespace Tests\Feature;

use App\Models\Companies;
use App\Models\Prospeccion;
use App\Models\ProspeccionCstm;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class ProspeccionClosedTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Companies::factory()->create();
        Sanctum::actingAs(
            User::factory()->create(),
            ['environment:dev']
        );
    }
    /**
     * Prospeecion Closed Success
     *
     * @return void
     */
    public function test_prospeccion_closed()
    {
      $prospeccion = new Prospeccion();
      $prospeccion->estado = 1;
      $prospeccion->name = 'PROSPECCION-XXXX';
      $prospeccion->save();

      $prospeccionCstm = new ProspeccionCstm();
      $prospeccionCstm->id_c = $prospeccion->id;
      $prospeccionCstm->save();

      $data = [
        'datosSugarCRM' => [
          'motivo_cierre' => '3'
        ]
      ];

      $response = $this->json('POST', $this->baseUrl . 'close_prospeccion/'. $prospeccion->id, $data);

      $content_update = json_decode($response->content());
      $response->assertStatus(200);
      $this->assertEquals($content_update->data->prospeccion_id, $prospeccion->id);
      $this->assertEquals($content_update->data->prospeccion_name, $prospeccion->name);

      $updateProspeccion = Prospeccion::find($prospeccion->id);

      $this->assertEquals(4, $updateProspeccion->estado);
      $this->assertEquals(3, $updateProspeccion->prospeccionCstm->motivo_cierre_c);
    }

    public function test_prospeccion_invalid_status()
    {
      $prospeccion = new Prospeccion();
      $prospeccion->estado = 1;
      $prospeccion->name = 'PROSPECCION-XXXX';
      $prospeccion->save();

      $prospeccionCstm = new ProspeccionCstm();
      $prospeccionCstm->id_c = $prospeccion->id;
      $prospeccionCstm->save();

      $data = [
        'datosSugarCRM' => [
          'motivo_cierre' => '10'
        ]
      ];

      $response = $this->json('POST', $this->baseUrl . 'close_prospeccion/'. $prospeccion->id, $data);

      $content_update = json_decode($response->content());

      $response->assertStatus(422);
      $err_motivo_cierre = 'datosSugarCRM.motivo_cierre';
      $this->assertEquals($content_update->errors->$err_motivo_cierre[0], 'Motivo de cierre no contiene un valor válido, valores válidos: 1(No aplica a financiamiento), 2(Sólo Información), 3(No Contactado), 4(Desiste), 5(Compra Futura)');
    }

    public function test_prospeccion_closed_not_exists()
    {
        $data = [
            'datosSugarCRM' => [
                'motivo_cierre' => '2'
            ]
        ];
        $response = $this->json('POST', $this->baseUrl . 'close_prospeccion/id_not_exists', $data);

        $content_update = json_decode($response->content());

        $response->assertStatus(404);
        $this->assertEquals($content_update->error, 'Prospección no existe, id inválido');
    }
}
