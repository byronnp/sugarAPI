<?php

namespace Tests\Feature;

use App\Models\Calls;
use App\Models\CallsCstm;
use App\Models\Contacts;
use App\Models\ContactsCstm;
use App\Models\Meetings;
use App\Models\MeetingsCstm;
use App\Models\Prospeccion;
use App\Models\ProspeccionCstm;
use App\Models\User;
use App\Models\Ws_logs;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Http;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class ProspeccionSuccesCallTest extends TestCase
{
  use RefreshDatabase, WithFaker;

  public $dataCall = [];
  public $dataTicket = [];
  protected function setUp(): void
  {
    parent::setUp(); // TODO: Change the autogenerated stub
      $this->setInitDataUserSanctum();

      $this->dataTicket = [
      'datosSugarCRM' => [
        'numero_identificacion' => $this->faker->numerify('##########'),
        'tipo_identificacion' => 'C',
        'email' => 'frvr@gmail.com',
        'user_name' => 'XI_VALDES',
        'nombres' => 'Manuel Álvaro',
        'apellidos' => 'Torres',
        'celular' => '0987519726',
        'telefono' => '022072826',
        'estado' => '1',
        'motivo_cierre' => 'no_contesta',
        'linea_negocio' => '2',
        'tipo_transaccion' => '1',
        'marca' => '1',
        'modelo' => '1',
        'anio' => '2020',
        'placa' => 'PCY7047',
        'kilometraje' => '190000',
        'color' => 'GRIS',
        'asunto' => 'molestias',
        'id_interaccion_inconcert' => 'id_interaccion_inconcert',
        'comentario_cliente' => 'comentario_cliente',
        'description' => 'description',
        'medio' => '5'
      ]
    ];

    $response = $this->json('POST', $this->baseUrl . 'tickets', $this->dataTicket);
    $content = json_decode($response->content());

    $this->dataCall = [
      'datosSugarCRM' => [
        'user_name_asesor' => 'CG_RAMOS', //10296f94-ebf3-42a8-a42d-5c880a18abca
        'user_name_call_center' => 'XI_VALDES', //2fa28a3f-9a39-3d63-4729-5b7353ef1fd9
        'date_start' => '2021-12-24 19:59',
        'duration_hours' => '0',
        'duration_minutes' => '10',
        'status' => 'Held',
        'direction' => 'Inbound',
        'type' => 'cita',
        'medio' => '5',
        'category' => '2',
        'notes' => 'Llamar el día lunes',
        'ticket' => [
          'id' => $content->data->ticket_id,
          'is_closed' => false
        ],
        'meeting' => [
          'status' => 'Held',
          'date' => '2021-03-31 09:59',
          'duration_hours' => '0',
          'duration_minutes' => '2',
          'subject' => 'Prueba de Manejo',
          'comments' => 'El cliente se acerca a la agencia...',
          'location' => 'Agencia los Chillos',
          'type' => '1',
          'visit_type' => '1',
          'linea_negocio' => '2',
          'client' => [
            'tipo_identificacion' => 'C',
            'numero_identificacion' => '1719932079003',
            'gender' => 'M',
            'names' => 'Manuelito',
            'surnames' => 'Torres',
            'cellphone_number' => '0987512224',
            'phone_home' => '022450251',
            'email' => 'fredd2021@hotmail.com'
          ]
        ]
      ]
    ];

    Prospeccion::where('numero_identificacion', '1719932079003')
      ->update(['estado' => 4]);
  }
  /**
   * A basic feature test example.
   *
   * @return void
   */
  public function test_data_success_call_saved()
  {
    $response = $this->json('POST', $this->baseUrl . 'calls', $this->dataCall);
    $contentProspeccion = json_decode($response->content());
    $prospeccion = Prospeccion::find($contentProspeccion->data->prospeccion_id);
    $meetings = $prospeccion->meetings()->where('status', 'Planned')->get();

    foreach ($meetings as $meet) {
      $meet->status = 'Not Held';
      $meet->save();
    }

    $this->dataCall["datosSugarCRM"]["prospeccion_id"] = $contentProspeccion->data->prospeccion_id;
    $this->dataCall["datosSugarCRM"]["user_name_call_center"] = "JA_AGUIRRE"; //e6c5f3d8-4f4b-11ea-ac0c-000c297d72b1
    $this->dataCall["datosSugarCRM"]["type"] = "seguimiento";
    $this->dataCall["datosSugarCRM"]["meeting"] = [];

    $response = $this->json('POST', $this->baseUrl . 'calls_prospeccion', $this->dataCall);
    $contentMeetingProspeccion = json_decode($response->content());

    $response->assertStatus(200);
    $this->assertNotNull($contentMeetingProspeccion->data->call_id);
    $this->assertNotNull($contentMeetingProspeccion->data->prospeccion_id);
    $this->assertEquals('N/A', $contentMeetingProspeccion->data->meeting_id);

    $this->datCallComplete($contentMeetingProspeccion->data->call_id, $prospeccion);
    $this->dataProspeccionComplete($contentMeetingProspeccion->data->prospeccion_id);
    $this->dataWsLogsComplete($contentMeetingProspeccion->data, $this->dataCall);
  }

  public function datCallComplete($callId, $prospeccion)
  {
    $call = Calls::find($callId);
    $this->assertEquals($prospeccion->nombres .' '. $prospeccion->apellidos, $call->name);
    $this->assertEquals('e6c5f3d8-4f4b-11ea-ac0c-000c297d72b1', $call->modified_user_id);
    $this->assertEquals('e6c5f3d8-4f4b-11ea-ac0c-000c297d72b1', $call->created_by);
    $this->assertEquals('0', $call->deleted);
    $this->assertEquals($this->dataCall['datosSugarCRM']['duration_hours'], $call->duration_hours);
    $this->assertEquals($this->dataCall['datosSugarCRM']['duration_minutes'], $call->duration_minutes);
    $this->assertEquals('2021-12-24 19:59:00', $call->date_start);
    $this->assertEquals('2021-12-24 20:09:00', $call->date_end);
    $this->assertEquals('cbp_Prospeccion', $call->parent_type);
    $this->assertEquals($this->dataCall['datosSugarCRM']['prospeccion_id'], $call->parent_id);
    $this->assertEquals($this->dataCall['datosSugarCRM']['status'], $call->status);
    $this->assertEquals($this->dataCall['datosSugarCRM']['direction'], $call->direction);
    $this->assertEquals('e6c5f3d8-4f4b-11ea-ac0c-000c297d72b1', $call->assigned_user_id);
    $this->assertEquals('1', $call->team_id);
    $this->assertEquals('1', $call->team_set_id);

    $callCSTM = CallsCstm::where('id_c', $callId)->first();
    $this->assertEquals($this->dataCall['datosSugarCRM']['category'], $callCSTM->categoria_llamada_c);
    $this->assertEquals($this->dataCall['datosSugarCRM']['type'], $callCSTM->tipo_llamada_c);
    $this->assertEquals('P', $callCSTM->origen_creacion_c);
    $this->assertEquals('no', $callCSTM->llamada_automatica_c);
    $this->assertEquals('Manuelito Torres - Cel:0987512224', $callCSTM->info_contacto_c);
  }

  public function dataProspeccionComplete($prospeccionId)
  {
    $prospeccion = Prospeccion::find($prospeccionId);
    $this->assertEquals('e6c5f3d8-4f4b-11ea-ac0c-000c297d72b1', $prospeccion->modified_user_id);
    $this->assertEquals('Prueba de Manejo: El cliente se acerca a la agencia...', $prospeccion->description);
    $this->assertEquals('2', $prospeccion->fuente);
    $this->assertEquals('5', $prospeccion->estado);
    $this->assertEquals('1', $prospeccion->team_id);
    $this->assertEquals('1', $prospeccion->team_set_id);
    $this->assertEquals('1', $prospeccion->brinda_identificacion);
    $this->assertEquals('10296f94-ebf3-42a8-a42d-5c880a18abca', $prospeccion->assigned_user_id);

    $prospeccionCSTM = ProspeccionCstm::where('id_c', $prospeccion->id)->first();
    $this->assertEquals('10296f94-ebf3-42a8-a42d-5c880a18abca', $prospeccionCSTM->user_id_c);
    $this->assertEquals('5', $prospeccionCSTM->medio_c);
  }

  public function dataWsLogsComplete($data_response, $json_request)
  {
    $wsLog = Ws_logs::where('prospeccion_id', $data_response->prospeccion_id)
      ->where('route', 'api/calls_prospeccion/')
      ->first();

    $this->assertEquals($data_response->prospeccion_id, $wsLog->prospeccion_id);
    $this->assertEquals($data_response->call_id, $wsLog->call_id);
    $this->assertNull($wsLog->meeting_id);
    $this->assertJson(json_encode($json_request['datosSugarCRM']), $wsLog->datos_sugar_crm);
  }
}
