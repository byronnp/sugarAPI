<?php

namespace Tests\Feature;

use App\Models\BusinessLine;
use App\Models\Companies;
use App\Models\Contacts;
use App\Models\ContactsCstm;
use App\Models\LandingPages;
use App\Models\Medio;
use App\Models\Prospeccion;
use App\Models\ProspeccionCstm;
use App\Models\Tickets;
use App\Models\User;
use App\Models\Ws_logs;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ProspectionLandingTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    public $dataLanding = [];
    public $dataCreateLanding = [];
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Companies::factory()->create();
        $this->user_admin = new User();
        $this->user_admin->name = 'adminPrueba';
        $this->user_admin->email = 'autorizadorTesting@gmail.com';
        $this->user_admin->admin = 1;
        $this->user_admin->password = bcrypt('autorizador');
        $this->user_admin->save();

        $this->setInitDataUserSanctum();

        $this->dataCreateLanding = [
            "name" => "APP_TALLER",
            "medio" => "18",
            "autorizador" => "autorizadorTesting@gmail.com",
            "properties_form" =>
                [
                    ["label" => "Vehiculo",
                        "value" => "modelo",
                        "validations" => "required"
                    ],
                    ["label" => "Version",
                        "value" => "version"
                    ],
                    ["label" => "Tiene Toyota",
                        "value" => "tienetoyota",
                        "validations" => "required|in:1,0"
                    ],
                    ["label" => "Asesor Correo",
                        "value" => "asesorcorreo"
                    ],
                    ["label" => "Interesado Renovar",
                        "value" => "interesadorenovacion",
                        "validations" => "in:1,0"
                    ],
                    ["label" => "Hora Entrega Inmediata",
                        "value" => "horaentregainmediata",
                        "validations" => "date_format:Y-m-d H:i:s"
                    ],
                    ["label" => "Asesor Nombre",
                        "value" => "asesornombre"
                    ]
                ],
            "business_line_id" => "f417e1ae-a81b-11e9-ab2c-000c297d72b1",
            "user_login" => "tests_source",
            "type_transaction" => "1",
            "user_assigned_position" => "2",
            "campaign" => "0626c2b0-1ad2-11ea-830b-000c297d72b1",
            "fuente_s3s" => "17"
        ];

        $this->json('POST', $this->baseUrl . "create_landing_page", $this->dataCreateLanding);

        $this->dataLanding = [
            'datosSugarCRM' => [
                "fuente"=> "17",
                "tipo_identificacion"=> "C",
                "numero_identificacion"=> "1003088414",
                "nombres"=> $this->faker()->name,
                "apellidos"=> $this->faker()->lastName,
                "celular"=> $this->faker()->numerify('##########'),
                "telefono"=> $this->faker()->numerify('#########'),
                "email"=> "prueba@gmail.com",
                "modelo"=> "hilux-at",
                "version"=> "hilux-at-Hilux CD 2.7 Gas 4x2",
                "tienetoyota"=> "1",
                "comentarios"=> "Comentario de Prueba",
                "asesornombre" => "Testing Asesor",
                "horaentregainmediata" => "2021-06-10 14:00:00",
                "asesorcorreo" => "asesorTest@gmail.com",
                "interesadorenovacion" => "1",
                "agencia" => "14",
            ]
        ];
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testCreateProspectionLandingPage()
    {
        Prospeccion::where('numero_identificacion', $this->dataLanding['datosSugarCRM']['numero_identificacion'])->update(["estado" => 4]);

        $response = $this->json('POST', $this->baseUrl . 'forms_prospeccion', $this->dataLanding);
        $content = json_decode($response->content());
        $response->assertStatus(200);
        $this->assertNotNull($content->data->prospeccion_id);
        $this->assertNotNull($content->data->prospeccion_url);
        $this->assertNotNull($content->data->prospeccion_name);
        $this->assertNotNull($content->data->prospeccion_asignado_a);

        $landingPage = LandingPages::where('fuente_s3s', $this->dataLanding['datosSugarCRM']["fuente"])->first();
        $medio = Medio::find($landingPage->medio);

        $prospeccion = Prospeccion::find($content->data->prospeccion_id);
        $this->assertNotNull($prospeccion->modified_user_id);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['comentarios'], $prospeccion->description);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['numero_identificacion'], $prospeccion->numero_identificacion);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['tipo_identificacion'], $prospeccion->tipo_identificacion);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['nombres'], $prospeccion->nombres);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['apellidos'], $prospeccion->apellidos);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['celular'], $prospeccion->celular);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['telefono'], $prospeccion->telefono);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['email'], $prospeccion->email);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['comentarios'], $prospeccion->description);
        $this->assertEquals($medio->fuente_id, $prospeccion->fuente);
        $this->assertEquals('1', $prospeccion->estado);
        $this->assertEquals('1', $prospeccion->team_id);
        $this->assertEquals('1', $prospeccion->team_set_id);
        $this->assertEquals('1', $prospeccion->brinda_identificacion);
        $this->assertNotNull($prospeccion->assigned_user_id);
        $this->assertEquals($landingPage->business_line_id, $prospeccion->cb_lineanegocio_id_c);

        $prospeccionCSTM = ProspeccionCstm::where('id_c', $prospeccion->id)->first();
        $this->assertNotNull($prospeccionCSTM->user_id_c);
        $this->assertEquals($medio->id, $prospeccionCSTM->medio_c);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['asesornombre'], $prospeccionCSTM->nombre_asesor_servicio_c);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['asesorcorreo'], $prospeccionCSTM->correo_asesor_servicio_c);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['interesadorenovacion'], $prospeccionCSTM->interesado_renovacion_c);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['modelo'], $prospeccionCSTM->modelo_c);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['tienetoyota'], $prospeccionCSTM->tienetoyota_c);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['horaentregainmediata'], $prospeccionCSTM->hora_entrega_inmediata_c);

        $contact = Contacts::where('deleted', 0)
            ->join('contacts_cstm', 'contacts.id', '=', 'contacts_cstm.id_c')
            ->where('contacts_cstm.numero_identificacion_c', $this->dataLanding['datosSugarCRM']['numero_identificacion'])
            ->get()->first();

        $this->dataContactComplete($contact, $prospeccion);
        $this->createWsLogLandingPage($content->data->prospeccion_id);
    }

    public function dataContactComplete($contact, $prospeccion)
    {
        $this->assertNotNull($contact->modified_user_id);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['nombres'], $contact->first_name);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['apellidos'], $contact->last_name);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['celular'], $contact->phone_mobile);
        $this->assertEquals($this->dataLanding['datosSugarCRM']['telefono'], $contact->phone_home);
        $this->assertEquals($prospeccion->assigned_user_id, $contact->assigned_user_id);
        $this->assertEquals('1', $contact->team_id);
        $this->assertEquals('1', $contact->team_set_id);

        $contacts_cstm = ContactsCstm::where('id_c', $contact->id)->first();
        $this->assertEquals($this->dataLanding['datosSugarCRM']['tipo_identificacion'], $contacts_cstm->tipo_identificacion_c);
        $this->assertEquals('01', $contacts_cstm->tipo_cliente_c);
        $this->assertEquals('1', $contacts_cstm->tipo_contacto_c);
    }

    public function createWsLogLandingPage($prospeccion_id)
    {
        $wsLogs = Ws_logs::where('route', 'api/forms_prospeccion')->where('prospeccion_id', $prospeccion_id)->first();
        $this->assertJson(json_encode($this->dataLanding), $wsLogs->datos_sugar_crm);
        $this->assertEquals('sugar_dev', $wsLogs->environment);
        $this->assertEquals('tests_source', $wsLogs->source);
    }

    public function testValidateDataProspectionLandingTicket()
    {
        $data = [
            'datosSugarCRM' => [
                'fuente' => '17',
                "numero_identificacion" => '1719932079',
                "tipo_identificacion" => 'C',
                "apellidos" => '',
                "horaentregainmediata" => "14:00:00",
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'forms_prospeccion', $data);
        $content = json_decode($response->content());
        $err_nombres = 'datosSugarCRM.nombres';
        $err_apellidos = 'datosSugarCRM.apellidos';
        $err_celular = 'datosSugarCRM.celular';
        $err_email = 'datosSugarCRM.email';
        $err_agencia = 'datosSugarCRM.agencia';
        $err_modelo = 'datosSugarCRM.modelo';
        $err_tienetoyota = 'datosSugarCRM.tienetoyota';
        $err_horaentregainmediata = 'datosSugarCRM.horaentregainmediata';

        $response->assertStatus(422);

        $this->assertEquals($content->errors->$err_nombres[0], 'Nombres son requeridos');
        $this->assertEquals($content->errors->$err_apellidos[0], 'El campo datos sugar c r m.apellidos es requerido o no es válido.');
        $this->assertEquals($content->errors->$err_celular[0], 'Celular es requerido');
        $this->assertEquals($content->errors->$err_email[0], 'Email es requerido');
        $this->assertEquals($content->errors->$err_agencia[0], 'agencia es requerida');
        $this->assertEquals($content->errors->$err_modelo[0], 'modelo es requerido');
        $this->assertEquals($content->errors->$err_tienetoyota[0], 'tienetoyota es requerido');
        $this->assertEquals($content->errors->$err_horaentregainmediata[0], 'horaentregainmediata debe tener el siguiente formato Y-m-d hh:mm:ss');
    }
}
