<?php

namespace Tests\Feature;

use App\Models\Prospeccion;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Http;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class ProspeccionNotAnswerAutomaticTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public $dataCall = [];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setInitDataUserSanctum();
        $this->setInitDataTicket();

        $response = $this->json('POST', $this->baseUrl . 'tickets', $this->dataTicket);
        $content = json_decode($response->content());

        $this->dataCall = [
            'datosSugarCRM' => [
                'user_name_asesor' => 'CG_RAMOS', //10296f94-ebf3-42a8-a42d-5c880a18abca
                'user_name_call_center' => 'XI_VALDES', //2fa28a3f-9a39-3d63-4729-5b7353ef1fd9
                'date_start' => '2021-12-24 19:59',
                'duration_hours' => '0',
                'duration_minutes' => '10',
                'status' => 'Held',
                'medio' => '5',
                'direction' => 'Inbound',
                'type' => 'cita',
                'category' => '2',
                'notes' => 'Llamar el dÃ­a lunes',
                'ticket' => [
                    'id' => $content->data->ticket_id,
                    'is_closed' => false
                ],
                'meeting' => [
                    'status' => 'Held',
                    'date' => '2021-03-31 09:59',
                    'duration_hours' => '0',
                    'duration_minutes' => '2',
                    'subject' => 'Prueba de Manejo',
                    'comments' => 'El cliente se acerca a la agencia...',
                    'location' => 'Agencia los Chillos',
                    'type' => '1',
                    'visit_type' => '1',
                    'linea_negocio' => '2',
                    'client' => [
                        'tipo_identificacion' => 'C',
                        'numero_identificacion' => '1719932079003',
                        'gender' => 'M',
                        'names' => 'Manuelito',
                        'surnames' => 'Torres',
                        'cellphone_number' => '0987512224',
                        'phone_home' => '022450251',
                        'email' => 'fredd2021@hotmail.com'
                    ]
                ]
            ]
        ];

        Prospeccion::where('numero_identificacion', '1719932079003')
            ->update(['estado' => 4]);
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_data_not_answer_prospeccion()
    {
        $response = $this->json('POST', $this->baseUrl . 'calls', $this->dataCall);
        $contentProspeccion = json_decode($response->content());
        $prospeccion = Prospeccion::find($contentProspeccion->data->prospeccion_id);
        $meetings = $prospeccion->meetings()->where('status', 'Planned')->get();

        foreach ($meetings as $meet) {
            $meet->status = 'Not Held';
            $meet->save();
        }

        $this->dataCall["datosSugarCRM"]["prospeccion_id"] = $contentProspeccion->data->prospeccion_id;
        $this->dataCall["datosSugarCRM"]["user_name_call_center"] = "JA_AGUIRRE"; //e6c5f3d8-4f4b-11ea-ac0c-000c297d72b1
        $this->dataCall["datosSugarCRM"]["type"] = "seguimiento";
        $this->dataCall["datosSugarCRM"]["meeting"] = [];

        $this->json('POST', $this->baseUrl . 'calls_prospeccion', $this->dataCall);
        $response = $this->json('POST', $this->baseUrl . 'calls_prospeccion', $this->dataCall);

        $prospeccion = Prospeccion::find($contentProspeccion->data->prospeccion_id);
        $statusNotAnswer = 6;

        $response->assertStatus(200);
        $this->assertEquals($statusNotAnswer, $prospeccion->estado);
    }
}
