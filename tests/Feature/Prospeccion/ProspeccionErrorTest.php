<?php

namespace Tests\Feature;

use App\Models\Companies;
use App\Models\Prospeccion;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Http;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class ProspeccionErrorTest extends TestCase
{
  use RefreshDatabase, WithFaker;

  public $dataCall = [];
  protected function setUp(): void
  {
    parent::setUp(); // TODO: Change the autogenerated stub
    $this->setInitDataUserSanctum();
    $this->setInitDataTicket();

    $response = $this->json('POST', $this->baseUrl . 'tickets', $this->dataTicket);
    $content = json_decode($response->content());

    $this->dataCall = [
      'datosSugarCRM' => [
        'user_name_asesor' => 'CG_RAMOS', //10296f94-ebf3-42a8-a42d-5c880a18abca
        'user_name_call_center' => 'XI_VALDES', //2fa28a3f-9a39-3d63-4729-5b7353ef1fd9
        'date_start' => '2021-12-24 19:59',
        'duration_hours' => '0',
        'duration_minutes' => '10',
        'status' => 'Held',
        'direction' => 'Inbound',
        'type' => 'cita',
        'medio' => '5',
        'category' => '2',
        'notes' => 'Llamar el día lunes',
        'ticket' => [
          'id' => $content->data->ticket_id,
          'is_closed' => false
        ],
        'meeting' => [
          'status' => 'Held',
          'date' => '2021-03-31 09:59',
          'duration_hours' => '0',
          'duration_minutes' => '2',
          'subject' => 'Prueba de Manejo',
          'comments' => 'El cliente se acerca a la agencia...',
          'location' => 'Agencia los Chillos',
          'type' => '1',
          'visit_type' => '1',
          'linea_negocio' => '2',
          'client' => [
            'tipo_identificacion' => 'C',
            'numero_identificacion' => '1719932079003',
            'gender' => 'M',
            'names' => 'Manuelito',
            'surnames' => 'Torres',
            'cellphone_number' => '0987512224',
            'phone_home' => '022450251',
            'email' => 'fredd2021@hotmail.com'
          ]
        ]
      ]
    ];

    Prospeccion::where('numero_identificacion', '1719932079003')
      ->update(['estado' => 7]);
  }
  /**
   * A basic feature test example.
   *
   * @return void
   */
  public function test_date_follow_incomplete()
  {
    $this->dataCall = [
      'datosSugarCRM' => [
        'user_name_asesor' => 'user_name_not_exists', //10296f94-ebf3-42a8-a42d-5c880a18abca
        'user_name_call_center' => 'user_name_not_exists', //15396f5c-dbf1-5a6c-9637-5a8b8f14aaf3
      ]
    ];

    $response = $this->json('POST', $this->baseUrl . 'calls_prospeccion', $this->dataCall);
    $contentProspeccion = json_decode($response->content());

    $err_user_name_asesor = 'datosSugarCRM.user_name_asesor';
    $err_user_call_center = 'datosSugarCRM.user_name_call_center';
    $err_date_start = 'datosSugarCRM.date_start';
    $err_duration_hours = 'datosSugarCRM.duration_hours';
    $err_duration_minutes = 'datosSugarCRM.duration_minutes';
    $err_status = 'datosSugarCRM.status';
    $err_direction = 'datosSugarCRM.direction';
    $err_type = 'datosSugarCRM.type';
    $err_category = 'datosSugarCRM.category';
    $err_notes = 'datosSugarCRM.notes';
    $err_prospeccion = 'datosSugarCRM.prospeccion_id';
    $response->assertStatus(422);

    $this->assertEquals($contentProspeccion->errors->$err_user_name_asesor[0], 'User-name inválido, asesor no se encuentra registrado');
    $this->assertEquals($contentProspeccion->errors->$err_user_call_center[0], 'User-name inválido, call center no se encuentra registrado');
    $this->assertEquals($contentProspeccion->errors->$err_date_start[0], 'La fecha de inicio de llamada es requerida');
    $this->assertEquals($contentProspeccion->errors->$err_duration_hours[0], 'Duration_hours es requerido');
    $this->assertEquals($contentProspeccion->errors->$err_duration_minutes[0], 'Duration_minutes es requerido');
    $this->assertEquals($contentProspeccion->errors->$err_status[0], 'Estado de la llamada es requerido');
    $this->assertEquals($contentProspeccion->errors->$err_direction[0], 'Direction es requerido');
    $this->assertEquals($contentProspeccion->errors->$err_type[0], 'Type es requerido');
    $this->assertEquals($contentProspeccion->errors->$err_category[0], 'Category es requerido');
    $this->assertEquals($contentProspeccion->errors->$err_notes[0], 'Notas es requerido');
    $this->assertEquals($contentProspeccion->errors->$err_prospeccion[0], 'Id de la prospeccón es requerida');
  }

  public function test_date_incomplete()
  {
    $prospeccion = Prospeccion::where('deleted', '0')->first();
    $this->dataCall = [
      'datosSugarCRM' => [
        'user_name_asesor' => 'CG_RAMOS', //10296f94-ebf3-42a8-a42d-5c880a18abca
        'user_name_call_center' => 'XI_VALDES', //2fa28a3f-9a39-3d63-4729-5b7353ef1fd9
        'date_start' => '2021-12-24 19:59',
        'duration_hours' => '0',
        'duration_minutes' => '10',
        'status' => 'Held',
        'direction' => 'Inbound',
        'type' => 'cita',
        'category' => '2',
        'notes' => 'Llamar el día lunes',
        'prospeccion_id' => $prospeccion->id,
      ]
    ];

    $response = $this->json('POST', $this->baseUrl . 'calls_prospeccion', $this->dataCall);
    $contentProspeccion = json_decode($response->content());

    $err_date = 'datosSugarCRM.meeting.date';
    $err_duration_hours = 'datosSugarCRM.meeting.duration_hours';
    $err_duration_minutes = 'datosSugarCRM.meeting.duration_minutes';
    $err_subject = 'datosSugarCRM.meeting.subject';
    $err_comments = 'datosSugarCRM.meeting.comments';
    $err_location = 'datosSugarCRM.meeting.location';
    $err_type = 'datosSugarCRM.meeting.type';
    $err_visit_type = 'datosSugarCRM.meeting.visit_type';
    $err_linea_negocio = 'datosSugarCRM.meeting.linea_negocio';
    $err_tipo_identificacion = 'datosSugarCRM.meeting.client.tipo_identificacion';
    $err_numero_identificacion = 'datosSugarCRM.meeting.client.numero_identificacion';
    $err_gender = 'datosSugarCRM.meeting.client.gender';
    $err_names = 'datosSugarCRM.meeting.client.names';
    $err_surnames = 'datosSugarCRM.meeting.client.surnames';
    $err_cellphone_number = 'datosSugarCRM.meeting.client.cellphone_number';
    $err_email = 'datosSugarCRM.meeting.client.email';
    $response->assertStatus(422);

    $this->assertEquals($contentProspeccion->errors->$err_date[0], 'La fecha de la cita es requerida');
    $this->assertEquals($contentProspeccion->errors->$err_duration_hours[0], 'Meeting.duration_hours es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_duration_minutes[0], 'Meeting.duration_minutes es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_subject[0], 'Meeting.subject es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_comments[0], 'Meeting.comments es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_location[0], 'Meeting.location es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_type[0], 'Meeting.type es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_visit_type[0], 'Meeting.visit_type es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_linea_negocio[0], 'Meeting.linea_negocio es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_tipo_identificacion[0], 'Meeting.client.tipo_identificacion es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_numero_identificacion[0], 'Meeting.client.numero_identificacion es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_gender[0], 'Meeting.client.gender es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_names[0], 'Meeting.client.names es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_surnames[0], 'Meeting.client.surnames es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_cellphone_number[0], 'Meeting.client.cellphone_number es requerido si el tipo de llamada es cita');
    $this->assertEquals($contentProspeccion->errors->$err_email[0], 'Meeting.client.email es requerido si el tipo de llamada es cita');
  }


  public function test_meeting_exist()
  {
    $this->json('POST', $this->baseUrl . 'calls', $this->dataCall);
    $response = $this->json('POST', $this->baseUrl . 'calls', $this->dataCall);
    $contentProspeccion = json_decode($response->content());
    $this->dataCall["datosSugarCRM"]["prospeccion_id"] = $contentProspeccion->data->prospeccion_id;


    $response = $this->json('POST', $this->baseUrl . 'calls_prospeccion', $this->dataCall);
    $contentProspeccion = json_decode($response->content());

    $this->assertEquals($contentProspeccion->error, 'La prospeccion seleccionada ya tiene una reunión planificada');
  }
}
