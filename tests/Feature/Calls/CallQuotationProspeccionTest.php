<?php

namespace Tests\Feature;

use App\Models\Calls;
use App\Models\CallsContacts;
use App\Models\CallsProspeccion;
use App\Models\Contacts;
use App\Models\Prospeccion;
use App\Models\ProspeccionContacts;
use App\Models\Tickets;
use App\Models\TicketsCalls;
use App\Models\TicketsProspeccion;
use App\Models\User;
use App\Models\Ws_logs;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class CallQuotationProspeccionTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    public $dataCall = [];
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setInitDataUserSanctum();
        $this->setInitDataTicket();

        $this->dataCallProspeccion = [
            'datosSugarCRM' => [
                'user_name_call_center' => 'XI_VALDES', //2fa28a3f-9a39-3d63-4729-5b7353ef1fd9
                'date_start' => '2021-07-08 15:00',
                'duration_hours' => '0',
                'duration_minutes' => '10',
                'direction' => 'Outbound',
                'type' => 'automatica',
                'ticket_id' => 'ticketID',
                'comments' => 'Comentarios Cotizacion',
                'modelo' => 'Hilux 4x4 2022 Negra',
                'medio' => '5',
                'campania' => '5e686580-ee19-11ea-97ea-000c297d72b1',
                'client' => [
                    'tipo_identificacion' => 'C',
                    'numero_identificacion' => '1719932079005',
                    'gender' => 'F',
                    'names' => 'PRUEBA',
                    'surnames' => 'TESTER',
                    'phone_home' => '022072829',
                    'cellphone_number' => '0987510422',
                    'email' => 'tester@gmail.com',
                ]
            ]
        ];
    }

    /** @test */
    public function create_prospeccion_succesfull()
    {
        $response = $this->json('POST', $this->baseUrl . 'call_ticket', $this->dataTicket);
        $contentTicket = json_decode($response->content());

        $this->dataCallProspeccion["datosSugarCRM"]["ticket_id"] = $contentTicket->data->ticket_id;
        Prospeccion::where('numero_identificacion', '1719932079005')
            ->update(['estado' => 7]);

        $response = $this->json('POST', $this->baseUrl . 'call_quotation', $this->dataCallProspeccion);
        $contentProspeccion = json_decode($response->content());

        $ticket = Tickets::find($contentTicket->data->ticket_id);

        $this->assertEquals(5, $ticket->estado);
        $this->assertNotNull($contentProspeccion->data->prospeccion_id);
        $this->assertNotNull($contentProspeccion->data->prospeccion_name);
        $this->assertNotNull($contentProspeccion->data->call_id);
        $this->assertEquals("https://domain.com/#cbp_Prospeccion/".$contentProspeccion->data->prospeccion_id, $contentProspeccion->data->prospeccion_url);

        $prospeccion = Prospeccion::find($contentProspeccion->data->prospeccion_id);

        $this->assertNotNull($prospeccion->name);
        $this->assertNotNull($prospeccion->date_entered);
        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $prospeccion->modified_user_id);
        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $prospeccion->created_by);
        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $prospeccion->assigned_user_id);
        $this->assertEquals("Comentarios Cotizacion", $prospeccion->description);
        $this->assertEquals("1719932079005", $prospeccion->numero_identificacion);
        $this->assertEquals($this->dataCallProspeccion["datosSugarCRM"]["client"]["tipo_identificacion"], $prospeccion->tipo_identificacion);
        $this->assertEquals($this->dataCallProspeccion["datosSugarCRM"]["client"]["names"], $prospeccion->nombres);
        $this->assertEquals($this->dataCallProspeccion["datosSugarCRM"]["client"]["surnames"], $prospeccion->apellidos);
        $this->assertEquals($this->dataCallProspeccion["datosSugarCRM"]["client"]["cellphone_number"], $prospeccion->celular);
        $this->assertEquals($this->dataCallProspeccion["datosSugarCRM"]["client"]["phone_home"], $prospeccion->telefono);
        $this->assertEquals($this->dataCallProspeccion["datosSugarCRM"]["client"]["email"], $prospeccion->email);
        $this->assertEquals($this->dataCallProspeccion["datosSugarCRM"]["campania"], $prospeccion->campaign_id_c);
        $this->assertEquals("2", $prospeccion->fuente);
        $this->assertEquals($this->dataCallProspeccion["datosSugarCRM"]["medio"], $prospeccion->prospeccionCstm->medio_c);
        $this->assertEquals(1, $prospeccion->estado);
        $this->assertEquals("d8365338-9206-11e9-a7c3-000c297d72b1", $prospeccion->cb_lineanegocio_id_c);

        $ticketProspeccion = $prospeccion->tickets()->first();
        $this->assertEquals($ticket->id, $ticketProspeccion->id);

        $contact = Contacts::where('deleted', 0)
            ->join('contacts_cstm', 'contacts.id', '=', 'contacts_cstm.id_c')
            ->where('contacts_cstm.numero_identificacion_c', '1719932079005')
            ->get()->first();

        $prospeccionContact = ProspeccionContacts::where('cbp_prospeccion_contactscontacts_ida', $contact->id)
            ->where('cbp_prospeccion_contactscbp_prospeccion_idb', $prospeccion->id)
            ->first();
        $this->assertNotNull($prospeccionContact->id);

        $prospeccionTicket = TicketsProspeccion::where('cbp_prospeccion_cbt_tickets_1cbt_tickets_idb', $ticket->id)
            ->where('cbp_prospeccion_cbt_tickets_1cbp_prospeccion_ida', $prospeccion->id)
            ->first();
        $this->assertNotNull($prospeccionTicket->id);

        $call = Calls::find($contentProspeccion->data->call_id);
        $this->assertEquals("FREDDY MANUEL VARGAS JACOME", $call->name);
        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $call->modified_user_id);
        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $call->created_by);
        $this->assertEquals("2fa28a3f-9a39-3d63-4729-5b7353ef1fd9", $call->assigned_user_id);
        $this->assertEquals("Comentarios Cotizacion", $call->description);
        $this->assertEquals(0, $call->deleted);
        $this->assertEquals(0, $call->duration_hours);
        $this->assertEquals(10, $call->duration_minutes);
        $this->assertEquals("2021-07-08 15:00:00", $call->date_start);
        $this->assertEquals("2021-07-08 15:10:00", $call->date_end);
        $this->assertEquals("cbt_Tickets", $call->parent_type);
        $this->assertEquals($contentTicket->data->ticket_id, $call->parent_id);
        $this->assertEquals('Held', $call->status);
        $this->assertEquals('Outbound', $call->direction);
        $this->assertEquals($call->id, $call->callsCstm->id_c);
        $this->assertEquals(3, $call->callsCstm->categoria_llamada_c);
        $this->assertEquals("FREDDY MANUEL VARGAS JACOME - Cel:0987519726", $call->callsCstm->info_contacto_c);
        $this->assertEquals("TK", $call->callsCstm->origen_creacion_c);
        $this->assertEquals("automatica", $call->callsCstm->tipo_llamada_c);

        $callTicket = TicketsCalls::where('cbt_tickets_callscbt_tickets_ida', $ticket->id)
            ->where('cbt_tickets_callscalls_idb', $call->id)
            ->first();
        $this->assertNotNull($callTicket->id);

        $callProspeccion = CallsProspeccion::where('cbp_prospeccion_callscbp_prospeccion_ida', $prospeccion->id)
            ->where('cbp_prospeccion_callscalls_idb', $call->id)
            ->first();

        $callContact = CallsContacts::where('contact_id', $contact->id)
            ->where('call_id', $call->id)
            ->first();
        $this->assertNotNull($callContact->id);

        $this->assertNotNull($callProspeccion->id);
        $this->validateWSLogs($prospeccion, $ticket);
    }

    public function validateWSLogs($prospeccion, $ticket){
        $wsLogs = Ws_logs::where('prospeccion_id', $prospeccion->id)->where('route', 'api/call_quotation/')->first();

        $this->assertJson(json_encode($this->dataCallProspeccion), $wsLogs->datos_sugar_crm);
        $this->assertEquals($ticket->id, $wsLogs->ticket_id);
        $this->assertEquals('sugar_dev', $wsLogs->environment);
        $this->assertEquals('tests_source', $wsLogs->source);
    }

    /** @test */
    public function create_prospeccion_incomplete_data()
    {
        $data = [
            'datosSugarCRM' => [
                'user_name_call_center' => 'NoExists',
                'ticket_id' => 'NoExists',
                'comments' => "Comentarios",
                'modelo' => "HILUX 4*4",
                'medio' => "NotExists",
                'campania' => "NotExists",
                'client' => [
                    'tipo_identificacion' => 'H',

                ]
            ]
        ];

        $response = $this->json('POST', $this->baseUrl . 'call_quotation', $data);
        $content = json_decode($response->content());

        $err_user_call_center = 'datosSugarCRM.user_name_call_center';
        $err_date_start = 'datosSugarCRM.date_start';
        $err_duration_hours = 'datosSugarCRM.duration_hours';
        $err_duration_minutes = 'datosSugarCRM.duration_minutes';
        $err_direction = 'datosSugarCRM.direction';
        $err_type = 'datosSugarCRM.type';
        $err_ticket_id = 'datosSugarCRM.ticket_id';
        $err_tipo_identificacion = 'datosSugarCRM.client.tipo_identificacion';
        $err_numero_identificacion = 'datosSugarCRM.client.numero_identificacion';
        $err_gender = 'datosSugarCRM.client.gender';
        $err_names = 'datosSugarCRM.client.names';
        $err_surnames = 'datosSugarCRM.client.surnames';
        $err_phone_home = 'datosSugarCRM.client.phone_home';
        $err_cellphone_number = 'datosSugarCRM.client.cellphone_number';
        $err_email = 'datosSugarCRM.client.email';
        $err_medio = 'datosSugarCRM.medio';
        $err_campania = 'datosSugarCRM.campania';
        $response->assertStatus(422);

        $this->assertEquals($content->errors->$err_date_start[0], 'La fecha de inicio de llamada es requerida');
        $this->assertEquals($content->errors->$err_duration_hours[0], 'Duration_hours es requerido');
        $this->assertEquals($content->errors->$err_duration_minutes[0], 'Duration_minutes es requerido');
        $this->assertEquals($content->errors->$err_direction[0], 'Direction es requerido');
        $this->assertEquals($content->errors->$err_type[0], 'Type es requerido');
        $this->assertEquals($content->errors->$err_user_call_center[0], 'User-name inválido, call center no se encuentra registrado');
        $this->assertEquals($content->errors->$err_ticket_id[0], 'Ticket inválido, id no existe');
        $this->assertEquals($content->errors->$err_tipo_identificacion[0], 'Tipo de identificación no contiene un valor válido, valores válidos: C(Cedula),P(Pasaporte), R(RUC)');
        $this->assertEquals($content->errors->$err_numero_identificacion[0], 'Client.numero_identificacion es requerido');
        $this->assertEquals($content->errors->$err_gender[0], 'Client.gender es requerido');
        $this->assertEquals($content->errors->$err_names[0], 'Client.names es requerido');
        $this->assertEquals($content->errors->$err_surnames[0], 'Client.surnames es requerido');
        $this->assertEquals($content->errors->$err_phone_home[0], 'Client.phone_home es requerido');
        $this->assertEquals($content->errors->$err_cellphone_number[0], 'Client.cellphone_number es requerido');
        $this->assertEquals($content->errors->$err_email[0], 'Client.email es requerido');
        $this->assertEquals($content->errors->$err_medio[0], 'Medio no contiene un valor válido, valores válidos: {"5":"Empleados","6":"App Talleres"}');
        $this->assertEquals($content->errors->$err_campania[0], 'Campaña no existe en SUGAR');
    }
}
