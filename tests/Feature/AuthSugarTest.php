<?php

namespace Tests\Feature;
use App\Models\Companies;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Helpers\HelperTest;
use App\Models\Users;
use App\Models\User;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Http;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class AuthSugarTest extends TestCase
{

  use RefreshDatabase, WithFaker;
  protected function setUp(): void
  {
    parent::setUp(); // TODO: Change the autogenerated stub
    Companies::factory()->create();
    User::factory()->create([]);
  }

    public function testVistaLoginConSugarRedirectLogueado()
    {
      $this->withoutExceptionHandling();
      $userLogin = Users::where('user_name','admin')->first();
      $response = $this->withSession(['user' => $userLogin])->get('login_sugar');
      $response->assertSessionHas('user', $userLogin);
      $response->assertRedirect('campaigns');
    }

    public function testVistaLoginConSugar()
    {
      $response = $this->get('login_sugar');
      $response->assertOk();
      $response->assertViewIs('sugar.login');
    }

  public function testVistaLogoutConSugar()
  {
    $response = $this->get('logout_sugar');
    $response->assertSessionMissing('user');
    $response->assertRedirect('login_sugar');
  }

    public function testPostLoginConSugar()
    {
      $username = 'admin';
      $password = 'Admin.1';
      Http::fake([
        env('REST_SUGAR') . 'oauth2/token' => Http::response([
          "access_token" => "13d5138f-dd94-4d3b-a127-8be245efd28b",
          "expires_in" => 3600,
          "token_type" => "bearer",
          "scope" => null,
          "refresh_token" => "beacca9c-6efc-4170-993b-2044834f90e6",
          "refresh_expires_in" => 1209600,
          "download_token" => "c313fbbf-aead-4408-b00d-0cca7b86bfe3",
        ], 200)
      ]);
      $response = $this->post('login_sugar',[
          'username' => $username,
          'password' => $password,
      ]);
      $userLogin = Users::where('user_name','admin')->first();
      $response->assertSessionHas('success', 'Bienvenido ' . $username);
      $response->assertSessionHas('user', $userLogin);
      $response->assertRedirect('campaigns');
    }

    public function testPostLoginConSugarErrorCredenciales()
    {
      $username = 'admin';
      $password = 'Admin.2';
      Http::fake([
        env('REST_SUGAR') . 'oauth2/token' => Http::response([
          "error" => "need_login",
          "error_message" => "Debe indicar un usuario y contraseña válidos."
        ], 200)
      ]);
      $response = $this->post('login_sugar',[
        'username' => $username,
        'password' => $password,
      ]);
      Users::where('user_name','admin')->first();
      $response->assertSessionHas('error');
      $response->assertRedirect('login_sugar');
    }

    public function providerPostInvalidos(): array
    {
        return[
            'Post requerido username' => ['','password',['username']],
            'Post requerido password' => ['username','',['password']],
            'Post requerido username y password' => ['','',['username','password']],
        ];
    }

    /**
     * @dataProvider providerPostInvalidos
     */
    public function testPostLoginConSugarConRequeridos (String $titulo,String $descripcion,Array $reglas)
    {
        $response = $this->post('login_sugar',[
            'username' => $titulo,
            'password' => $descripcion,
        ]);
        $response->assertSessionHasErrors($reglas);
    }


}
