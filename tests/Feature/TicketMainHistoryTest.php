<?php

namespace Tests\Feature;

use App\Models\User;
use App\Services\TicketClass;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class TicketMainHistoryTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setInitDataUser();
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_ticketMainWithTicketModule()
    {
        $ticketClass = new TicketClass();
        $ticketClass->numero_identificacion = '1711932074';
        $ticketClass->precio_c = '25000';
        $ticketClass->combustible_c = 'gasolina';
        $ticketClass->kilometraje_c = '30000';
        $ticketClass->anio_min_c = '2019';
        $ticketClass->anio_max_c = '2020';
        $ticketClass->color_c = 'negro';
        $ticketClass->marca_c = '18';
        $ticketClass->modelo_c = '110';
        $ticket = $ticketClass->create();

        $response = $this->get('/ticketsMain/cbt_Tickets/'. $ticket->id . '/' . $ticket->numero_identificacion);

        $response->assertViewIs('tickets.history');
        $response->assertViewHas('numero_identificacion',$ticket->numero_identificacion);
        $response->assertViewHas('ticket_id',$ticket->id);
        $response->assertStatus(200);
    }

    public function test_ticketMainWithOtherModule()
    {
        $ticketClass = new TicketClass();
        $ticketClass->numero_identificacion = '1719932079';
        $ticketClass->precio_c = '25000';
        $ticketClass->combustible_c = 'gasolina';
        $ticketClass->kilometraje_c = '30000';
        $ticketClass->anio_min_c = '2019';
        $ticketClass->anio_max_c = '2020';
        $ticketClass->color_c = 'negro';
        $ticketClass->marca_c = '18';
        $ticketClass->modelo_c = '110';
        $ticket = $ticketClass->create();

        $response = $this->get('/ticketsMain/cb_negociacion/idNegociacion/' . $ticket->numero_identificacion);

        $response->assertViewIs('tickets.history');
        $response->assertViewHas('numero_identificacion',$ticket->numero_identificacion);
        $response->assertViewHas('ticket_id', null);
        $response->assertStatus(200);
    }

    public function test_ticketMainWithInvalidTicket()
    {
      $response = $this->get('/ticketsMain/cbt_Tickets/idTicketNoExiste/null');

      $response->assertViewIs('tickets.notFound');
      $response->assertViewHas('message', 'El ticket no existe');
    }

    public function test_ticketMainWithoutTicketNumeroIdentificacion()
    {
      $ticketClass = new TicketClass();
      $ticketClass->precio_c = '25000';
      $ticketClass->combustible_c = 'gasolina';
      $ticketClass->kilometraje_c = '30000';
      $ticketClass->anio_min_c = '2019';
      $ticketClass->anio_max_c = '2020';
      $ticketClass->color_c = 'negro';
      $ticketClass->marca_c = '18';
      $ticketClass->modelo_c = '110';
      $ticket = $ticketClass->create();

      $response = $this->get('/ticketsMain/cbt_Tickets/'. $ticket->id . '/null');

      $response->assertViewIs('tickets.notFound');
      $response->assertViewHas('message', 'El ticket no tiene numero identificacion');
    }

    public function test_ticketMainInvalidTicketNumeroIdentificacion()
    {
      $response = $this->get('/ticketsMain/cbp_Prospeccion/idProspeccionNoExiste/idNoExiste');

      $response->assertViewIs('tickets.notFound');
      $response->assertViewHas('message', 'Numero de identificaci√≥n no existe');
    }
}
