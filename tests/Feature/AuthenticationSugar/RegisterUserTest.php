<?php

namespace Tests\Feature;

use App\Models\Companies;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;
use App\Models\User;
class RegisterUserTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    public $user_admin;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Companies::factory()->create();
        $this->user_admin = new User();
        $this->user_admin->name = 'adminPrueba';
        $this->user_admin->email = 'autorizador@gmail.com';
        $this->user_admin->admin = 1;
        $this->user_admin->password = bcrypt('autorizador');
        $this->user_admin->save();
    }

    /** @test */
    public function createUser()
    {
        $data = [
            'name' => $this->faker->sentence(6, true),
            'email' => $this->faker->email,
            'password' => $this->faker->text(6),
            'autorizador' => $this->user_admin->email,
            'fuente' => 'name_external_system',
            'fuente_id' => 2,
            'medios' => '5,6',
            'compania' => '1'
        ];

        $response = $this->json('POST', $this->baseUrl . "register", $data);
        $response->assertStatus(200);

        $user_save = User::where('email', $data['email'])->first();
        $this->assertNotEmpty($user_save->id);
    }

    /** @test */
    public function notCreateUser()
    {
        $data = [
            'name' => $this->faker->sentence(6, true),
            'email' => $this->faker->email,
            'password' => $this->faker->text(6),
            'autorizador' => 'invalid_email'
        ];

        $response = $this->json('POST', $this->baseUrl . "register", $data);
        $response->assertStatus(500);
    }

    /** @test */
    public function loginUser()
    {
        $dataCreate = [
            'name' => $this->faker->sentence(6, true),
            'email' => $this->faker->email,
            'password' => $this->faker->text(6),
            'autorizador' => $this->user_admin->email,
            'fuente' => 'name_external_system',
            'fuente_id' => 2,
            'medios' => '5,6',
            'compania' => '1'
        ];

        $response = $this->json('POST', $this->baseUrl . "register", $dataCreate);
        $response->assertStatus(200);

        $dataLogin = [
            'email' => $dataCreate['email'],
            'password' => $dataCreate['password'],
            'autorizador' => $this->user_admin->email,
            "environment" => 'dev'
        ];

        $response = $this->json('POST', $this->baseUrl . "login", $dataLogin);
        $response->assertStatus(200);
        $content = json_decode($response->content());
        $this->assertEquals($content->status_code, 200);
        $this->assertNotNull($content->token);
    }

    /** @test */
    public function logoutUser()
    {
        Sanctum::actingAs(
            User::factory()->create([]),
            ['environment: dev']
        );

        $dataCreate = [
            'autorizador' => $this->user_admin->email
        ];

        $response = $this->json('GET', $this->baseUrl . "logout", $dataCreate);
        $response->assertStatus(200);
        $content = json_decode($response->content());
        $this->assertEquals(200, $content->status_code);
        $this->assertEquals('Token eliminado', $content->token);
    }
}
