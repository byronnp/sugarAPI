<?php

namespace Tests\Feature;

use App\Models\Companies;
use App\Models\LandingPages;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class LandingPageTest extends TestCase
{
    use RefreshDatabase, WithFaker;
    public $user_admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Companies::factory()->create();
        $this->user_admin = new User();
        $this->user_admin->name = 'adminPrueba';
        $this->user_admin->email = 'autorizadorTesting@gmail.com';
        $this->user_admin->admin = 1;
        $this->user_admin->password = bcrypt('autorizador');
        $this->user_admin->save();
    }

    public function test_landing_page()
    {
        $data = [
            "name" => "Exonerados",
            "medio" => "18",
            "autorizador" => "autorizadorTesting@gmail.com",
            "properties_form" =>
                ["Tipo de discapacidad"=>"tipo_discapacidad",
                 "Porcentaje de discapacidad"=>"porc_discapacidad",
                 "Vehiculo"=>"modelo",
                 "Version"=>"version",
                 "Concesionario"=>"concesionario",
                 "Direccion"=>"direccion",
                 "Tipo de ExoneraciÃ³n"=>"plan","Fecha"=>"fecha_creacion"],
            "business_line_id" => "f417e1ae-a81b-11e9-ab2c-000c297d72b1",
            "user_login" => "api_sugar_tde",
            "type_transaction" => "1",
            "user_assigned_position" => "2"
        ];

        $response = $this->json('POST', $this->baseUrl . "create_landing_page", $data);
        $content = json_decode($response->content());
        $this->assertEquals('200', $content->status_code);
        $this->assertEquals("Landing Page creada correctamente", $content->messsage);
        $response->assertStatus(200);

        $landingSaved = LandingPages::first();
        unset($data["autorizador"]);

        foreach ($data as $clave => $valor) {
            if(!is_array($valor)){
                $this->assertEquals($valor, $landingSaved[$clave]);
            }else{
                $this->assertEquals(json_encode($valor), json_encode($landingSaved[$clave]));
            }
        }
    }
}
